using System.Diagnostics;
using System.Reflection;
using System.Security;

namespace DouglasDwyer.CasCore;

/// <summary>
/// Provides a set of methods for whitelisting C# standard library members.
/// </summary>
public static class CasPolicyBuilderExtensions
{
    /// <summary>
    /// Adds all safe members from the <c>System.Collections.Concurrent</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemCollectionsConcurrent(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Collections.Concurrent"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Collections</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemCollections(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Collections"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Collections.Immutable</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemCollectionsImmutable(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Collections.Immutable"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Collections.NonGeneric</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemCollectionsNonGeneric(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Collections.NonGeneric"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Collections.Specialized</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemCollectionsSpecialized(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Collections.Specialized"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.ComponentModel.TypeConverter</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemComponentModelTypeConverter(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new TypeBinding(typeof(System.Timers.ElapsedEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Timers.ElapsedEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Timers.Timer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Timers.TimersDescriptionAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ArrayConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.BaseNumberConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.BooleanConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ByteConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.CharConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.CollectionConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DateOnlyConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DateTimeConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DateTimeOffsetConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DecimalConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DoubleConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.EnumConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.GuidConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.HalfConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Int16Converter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Int128Converter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Int32Converter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Int64Converter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.MultilineStringConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.NullableConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.PropertyDescriptor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.SByteConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.SingleConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.StringConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.TimeOnlyConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.TimeSpanConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.TypeConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.TypeListConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.UInt128Converter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.UInt16Converter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.UInt32Converter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.UInt64Converter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.VersionConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.AttributeCollection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.AttributeProviderAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.CancelEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.CollectionChangeAction), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.CollectionChangeEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.CollectionChangeEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.CustomTypeDescriptor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DefaultEventAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DefaultPropertyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.EventDescriptorCollection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ExtenderProvidedPropertyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.HandledEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.HandledEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.MemberDescriptor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.PropertyDescriptorCollection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ProvidePropertyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.RefreshEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.RefreshEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.TypeDescriptor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.TypeDescriptionProvider), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.AddingNewEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.AddingNewEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.AmbientValueAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.BindableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.BindableSupport), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.BindingDirection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.BindingList<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ListChangedEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ListChangedEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ListSortDirection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ListChangedType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ComplexBindingPropertiesAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ComponentConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ReferenceConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ComponentEditor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Container), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ContainerFilterService), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.InheritanceAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.InheritanceLevel), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.CultureInfoConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DataObjectAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DataObjectFieldAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DataObjectMethodAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DataObjectMethodType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DefaultBindingPropertyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DesignTimeVisibleAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ExpandableObjectConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ListSortDescriptionCollection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ListSortDescription), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.InstallerTypeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.InstanceCreationEditor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.LicenseContext), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.LicenseUsageMode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.LicenseException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.LicenseManager), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.LicenseProviderAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ListBindableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.LookupBindingPropertiesAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.MarshalByValueComponent), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.MaskedTextProvider), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.MaskedTextResultHint), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.NestedContainer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.PasswordPropertyTextAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.PropertyTabAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.PropertyTabScope), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.RunInstallerAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.SettingsBindableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ToolboxItemAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ToolboxItemFilterAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ToolboxItemFilterType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.WarningException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.ComponentResourceManager), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesignerVerbCollection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesignerVerb), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.MenuCommand), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.CommandID), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.CheckoutException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.StandardCommands), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesigntimeLicenseContext), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesigntimeLicenseContextSerializer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ActiveDesignerEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ActiveDesignerEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesignerTransaction), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesignerTransactionCloseEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesignerTransactionCloseEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ServiceCreatorCallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ComponentChangedEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ComponentChangedEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ComponentChangingEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ComponentChangingEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ComponentEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ComponentEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ComponentRenameEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ComponentRenameEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesignerCollection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesignerEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesignerEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.DesignerOptionService), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.HelpKeywordAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.HelpKeywordType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.HelpContextType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ViewTechnology), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.SelectionTypes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.ServiceContainer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.StandardToolWindows), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.Serialization.InstanceDescriptor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.Serialization.ComponentSerializationService), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.Serialization.ContextStack), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.Serialization.DesignerLoader), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.Serialization.MemberRelationshipService), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.Serialization.MemberRelationship), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.Serialization.ResolveNameEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Design.Serialization.ResolveNameEventArgs), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Console</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemConsole(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new TypeBinding(typeof(System.Console), Accessibility.None)
                .WithMethod("get_In", Accessibility.Protected)
                .WithMethod("get_InputEncoding", Accessibility.Protected)
                .WithMethod("set_InputEncoding", Accessibility.Protected)
                .WithMethod("get_OutputEncoding", Accessibility.Protected)
                .WithMethod("set_OutputEncoding", Accessibility.Protected)
                .WithMethod("get_KeyAvailable", Accessibility.Protected)
                .WithMethod("ReadKey", [], Accessibility.Protected)
                .WithMethod("ReadKey", [typeof(System.Boolean /*intercept*/),], Accessibility.Protected)
                .WithMethod("get_Out", Accessibility.Protected)
                .WithMethod("get_Error", Accessibility.Protected)
                .WithMethod("get_IsInputRedirected", Accessibility.Protected)
                .WithMethod("get_IsOutputRedirected", Accessibility.Protected)
                .WithMethod("get_IsErrorRedirected", Accessibility.Protected)
                .WithMethod("get_CursorSize", Accessibility.Protected)
                .WithMethod("set_CursorSize", Accessibility.Protected)
                .WithMethod("get_NumberLock", Accessibility.Protected)
                .WithMethod("get_CapsLock", Accessibility.Protected)
                .WithMethod("get_BackgroundColor", Accessibility.Protected)
                .WithMethod("set_BackgroundColor", Accessibility.Protected)
                .WithMethod("get_ForegroundColor", Accessibility.Protected)
                .WithMethod("set_ForegroundColor", Accessibility.Protected)
                .WithMethod("ResetColor", Accessibility.Protected)
                .WithMethod("get_BufferWidth", Accessibility.Protected)
                .WithMethod("set_BufferWidth", Accessibility.Protected)
                .WithMethod("get_BufferHeight", Accessibility.Protected)
                .WithMethod("set_BufferHeight", Accessibility.Protected)
                .WithMethod("SetBufferSize", Accessibility.Protected)
                .WithMethod("get_WindowLeft", Accessibility.Protected)
                .WithMethod("set_WindowLeft", Accessibility.Protected)
                .WithMethod("get_WindowTop", Accessibility.Protected)
                .WithMethod("set_WindowTop", Accessibility.Protected)
                .WithMethod("get_WindowWidth", Accessibility.Protected)
                .WithMethod("set_WindowWidth", Accessibility.Protected)
                .WithMethod("get_WindowHeight", Accessibility.Protected)
                .WithMethod("set_WindowHeight", Accessibility.Protected)
                .WithMethod("SetWindowPosition", Accessibility.Protected)
                .WithMethod("SetWindowSize", Accessibility.Protected)
                .WithMethod("get_LargestWindowWidth", Accessibility.Protected)
                .WithMethod("get_LargestWindowHeight", Accessibility.Protected)
                .WithMethod("get_CursorVisible", Accessibility.Protected)
                .WithMethod("set_CursorVisible", Accessibility.Protected)
                .WithMethod("get_CursorLeft", Accessibility.Protected)
                .WithMethod("set_CursorLeft", Accessibility.Protected)
                .WithMethod("get_CursorTop", Accessibility.Protected)
                .WithMethod("set_CursorTop", Accessibility.Protected)
                .WithMethod("GetCursorPosition", Accessibility.Protected)
                .WithMethod("get_Title", Accessibility.Protected)
                .WithMethod("set_Title", Accessibility.Protected)
                .WithMethod("Beep", [], Accessibility.Protected)
                .WithMethod("Beep", [typeof(System.Int32 /*frequency*/), typeof(System.Int32 /*duration*/),], Accessibility.Protected)
                .WithMethod("MoveBufferArea", [typeof(System.Int32 /*sourceLeft*/), typeof(System.Int32 /*sourceTop*/), typeof(System.Int32 /*sourceWidth*/), typeof(System.Int32 /*sourceHeight*/), typeof(System.Int32 /*targetLeft*/), typeof(System.Int32 /*targetTop*/),], Accessibility.Protected)
                .WithMethod("MoveBufferArea", [typeof(System.Int32 /*sourceLeft*/), typeof(System.Int32 /*sourceTop*/), typeof(System.Int32 /*sourceWidth*/), typeof(System.Int32 /*sourceHeight*/), typeof(System.Int32 /*targetLeft*/), typeof(System.Int32 /*targetTop*/), typeof(System.Char /*sourceChar*/), typeof(System.ConsoleColor /*sourceForeColor*/), typeof(System.ConsoleColor /*sourceBackColor*/),], Accessibility.Protected)
                .WithMethod("Clear", Accessibility.Protected)
                .WithMethod("SetCursorPosition", Accessibility.Protected)
                .WithMethod("add_CancelKeyPress", Accessibility.Protected)
                .WithMethod("remove_CancelKeyPress", Accessibility.Protected)
                .WithMethod("get_TreatControlCAsInput", Accessibility.Protected)
                .WithMethod("set_TreatControlCAsInput", Accessibility.Protected)
                .WithMethod("OpenStandardInput", [], Accessibility.Protected)
                .WithMethod("OpenStandardInput", [typeof(System.Int32 /*bufferSize*/),], Accessibility.Protected)
                .WithMethod("OpenStandardOutput", [], Accessibility.Protected)
                .WithMethod("OpenStandardOutput", [typeof(System.Int32 /*bufferSize*/),], Accessibility.Protected)
                .WithMethod("OpenStandardError", [], Accessibility.Protected)
                .WithMethod("OpenStandardError", [typeof(System.Int32 /*bufferSize*/),], Accessibility.Protected)
                .WithMethod("SetIn", Accessibility.Protected)
                .WithMethod("SetOut", Accessibility.Protected)
                .WithMethod("SetError", Accessibility.Protected)
                .WithMethod("Read", Accessibility.Protected)
                .WithMethod("ReadLine", Accessibility.Protected)
                .WithMethod("WriteLine", [], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Boolean /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Char /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Char[] /*buffer*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Char[] /*buffer*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Decimal /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Double /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Single /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.Object /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/), typeof(System.Object /*arg2*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*format*/), typeof(System.Object[] /*arg*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/), typeof(System.Object /*arg2*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*format*/), typeof(System.Object[] /*arg*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Boolean /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Char /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Char[] /*buffer*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Char[] /*buffer*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Double /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Decimal /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Single /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Object /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*value*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ConsoleCancelEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ConsoleCancelEventArgs), Accessibility.None)
                .WithMethod("get_Cancel", Accessibility.Protected)
                .WithMethod("set_Cancel", Accessibility.Protected)
                .WithMethod("get_SpecialKey", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ConsoleColor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ConsoleSpecialKey), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ConsoleKey), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ConsoleKeyInfo), Accessibility.None)
                .WithConstructor(Accessibility.Protected)
                .WithMethod("get_KeyChar", Accessibility.Protected)
                .WithMethod("get_Key", Accessibility.Protected)
                .WithMethod("get_Modifiers", Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Object /*value*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.ConsoleKeyInfo /*obj*/),], Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ConsoleModifiers), Accessibility.Protected))
            .Allow(new TypeBinding(Type.GetType("System.Text.ConsoleEncoding, System.Console")!, Accessibility.None)
                .WithMethod("GetPreamble", Accessibility.Public)
                .WithMethod("get_CodePage", Accessibility.Public)
                .WithMethod("get_IsSingleByte", Accessibility.Public)
                .WithMethod("get_EncodingName", Accessibility.Public)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/),], Accessibility.Public)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Public)
                .WithMethod("GetByteCount", [typeof(System.String /*s*/),], Accessibility.Public)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/),], Accessibility.Public)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Public)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Public)
                .WithMethod("GetBytes", [typeof(System.String /*s*/),], Accessibility.Public)
                .WithMethod("GetBytes", [typeof(System.String /*s*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Public)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/),], Accessibility.Public)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Public)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/),], Accessibility.Public)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Public)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/),], Accessibility.Public)
                .WithMethod("GetDecoder", Accessibility.Public)
                .WithMethod("GetEncoder", Accessibility.Public)
                .WithMethod("GetMaxByteCount", Accessibility.Public)
                .WithMethod("GetMaxCharCount", Accessibility.Public)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/),], Accessibility.Public)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Public))
            .Allow(new TypeBinding(Type.GetType("System.Text.OSEncoding, System.Console")!, Accessibility.None)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Public)
                .WithMethod("GetByteCount", [typeof(System.String /*s*/),], Accessibility.Public)
                .WithMethod("GetBytes", [typeof(System.String /*s*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Public)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Public)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/),], Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/),], Accessibility.Protected)
                .WithMethod("GetMaxByteCount", Accessibility.Public)
                .WithMethod("GetMaxCharCount", Accessibility.Public)
                .WithMethod("get_EncodingName", Accessibility.Public)
                .WithMethod("GetEncoder", Accessibility.Public)
                .WithMethod("GetDecoder", Accessibility.Public))
            .Allow(new TypeBinding(Type.GetType("System.Text.OSEncoder, System.Console")!, Accessibility.None)
                .WithMethod("Reset", Accessibility.Public)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/), typeof(System.Boolean /*flush*/),], Accessibility.Public)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Boolean /*flush*/),], Accessibility.Public)
                .WithMethod("Convert", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Boolean /*flush*/), typeof(System.Int32 /*charsUsed*/).MakeByRefType(), typeof(System.Int32 /*bytesUsed*/).MakeByRefType(), typeof(System.Boolean /*completed*/).MakeByRefType(),], Accessibility.Public))
            .Allow(new TypeBinding(Type.GetType("System.Text.DecoderDBCS, System.Console")!, Accessibility.None)
                .WithMethod("Reset", Accessibility.Public)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Public)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/), typeof(System.Boolean /*flush*/),], Accessibility.Public)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/),], Accessibility.Public)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Boolean /*flush*/),], Accessibility.Public)
                .WithMethod("Convert", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Boolean /*flush*/), typeof(System.Int32 /*bytesUsed*/).MakeByRefType(), typeof(System.Int32 /*charsUsed*/).MakeByRefType(), typeof(System.Boolean /*completed*/).MakeByRefType(),], Accessibility.Public))
            .Allow(new TypeBinding(Type.GetType("System.IO.ConsoleStream, System.Console")!, Accessibility.Public))
            .Allow(new TypeBinding(Type.GetType("System.IO.SyncTextReader, System.Console")!, Accessibility.Public));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Diagnostics.DiagnosticSource</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemDiagnosticsDiagnosticSource(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Diagnostics.DiagnosticSource"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Linq</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemLinq(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Linq"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Linq.Parallel</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemLinqParallel(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Linq.Parallel"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>.System.Linq.Queryable</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemLinqQueryable(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Linq.Queryable"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.ObjectModel</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemObjectModel(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.ObjectModel"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>CoreLib</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystem(this CasPolicyBuilder builder)
    {
        builder = builder
            .Allow(new TypeBinding(typeof(System.Array), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Attribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.BadImageFormatException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffer), Accessibility.None)
                .WithMethod("BlockCopy", Accessibility.Protected)
                .WithMethod("ByteLength", Accessibility.Protected)
                .WithMethod("GetByte", Accessibility.Protected)
                .WithMethod("SetByte", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Decimal), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Delegate), Accessibility.Public)
                .Where(x => x.Name != "CreateDelegate"))
            .Allow(new TypeBinding(typeof(System.Enum), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Environment), Accessibility.None)
                .WithMethod("get_CurrentManagedThreadId", Accessibility.Protected)
                .WithMethod("get_HasShutdownStarted", Accessibility.Protected)
                .WithMethod("get_Is64BitOperatingSystem", Accessibility.Protected)
                .WithMethod("get_NewLine", Accessibility.Protected)
                .WithMethod("get_OSVersion", Accessibility.Protected)
                .WithMethod("get_Version", Accessibility.Protected)
                .WithMethod("get_StackTrace", Accessibility.Protected)
                .WithMethod("get_SystemPageSize", Accessibility.Protected)
                .WithMethod("get_TickCount", Accessibility.Protected)
                .WithMethod("get_TickCount64", Accessibility.Protected)
                .WithMethod("get_UserInteractive", Accessibility.Protected)
                .WithMethod("get_WorkingSet", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Exception), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.GCCollectionMode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.GCNotificationStatus), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.GC), Accessibility.None)
                .WithMethod("GetGCMemoryInfo", [], Accessibility.Protected)
                .WithMethod("GetGCMemoryInfo", [typeof(System.GCKind /*kind*/),], Accessibility.Protected)
                .WithMethod("AddMemoryPressure", Accessibility.Protected)
                .WithMethod("RemoveMemoryPressure", Accessibility.Protected)
                .WithMethod("Collect", [typeof(System.Int32 /*generation*/),], Accessibility.Protected)
                .WithMethod("Collect", [], Accessibility.Protected)
                .WithMethod("Collect", [typeof(System.Int32 /*generation*/), typeof(System.GCCollectionMode /*mode*/),], Accessibility.Protected)
                .WithMethod("Collect", [typeof(System.Int32 /*generation*/), typeof(System.GCCollectionMode /*mode*/), typeof(System.Boolean /*blocking*/),], Accessibility.Protected)
                .WithMethod("Collect", [typeof(System.Int32 /*generation*/), typeof(System.GCCollectionMode /*mode*/), typeof(System.Boolean /*blocking*/), typeof(System.Boolean /*compacting*/),], Accessibility.Protected)
                .WithMethod("CollectionCount", Accessibility.Protected)
                .WithMethod("KeepAlive", Accessibility.Protected)
                .WithMethod("GetGeneration", [typeof(object)], Accessibility.Protected)
                .WithMethod("get_MaxGeneration", Accessibility.Protected)
                .WithMethod("WaitForPendingFinalizers", Accessibility.Protected)
                .WithMethod("SuppressFinalize", Accessibility.Protected)
                .WithMethod("ReRegisterForFinalize", Accessibility.Protected)
                .WithMethod("GetTotalMemory", Accessibility.Protected)
                .WithMethod("RegisterForFullGCNotification", Accessibility.Protected)
                .WithMethod("CancelFullGCNotification", Accessibility.Protected)
                .WithMethod("WaitForFullGCApproach", [], Accessibility.Protected)
                .WithMethod("WaitForFullGCApproach", [typeof(System.Int32 /*millisecondsTimeout*/),], Accessibility.Protected)
                .WithMethod("WaitForFullGCComplete", [], Accessibility.Protected)
                .WithMethod("WaitForFullGCComplete", [typeof(System.Int32 /*millisecondsTimeout*/),], Accessibility.Protected)
                .WithMethod("TryStartNoGCRegion", [typeof(System.Int64 /*totalSize*/),], Accessibility.Protected)
                .WithMethod("TryStartNoGCRegion", [typeof(System.Int64 /*totalSize*/), typeof(System.Int64 /*lohSize*/),], Accessibility.Protected)
                .WithMethod("TryStartNoGCRegion", [typeof(System.Int64 /*totalSize*/), typeof(System.Boolean /*disallowFullBlockingGC*/),], Accessibility.Protected)
                .WithMethod("TryStartNoGCRegion", [typeof(System.Int64 /*totalSize*/), typeof(System.Int64 /*lohSize*/), typeof(System.Boolean /*disallowFullBlockingGC*/),], Accessibility.Protected)
                .WithMethod("EndNoGCRegion", Accessibility.Protected)
                .WithMethod("RegisterNoGCRegionCallback", Accessibility.Protected)
                .WithMethod("AllocateArray", Accessibility.Protected)
                .WithMethod("GetTotalPauseDuration", Accessibility.Protected)
                .WithMethod("GetConfigurationVariables", Accessibility.Protected)
                .WithMethod("RefreshMemoryLimit", Accessibility.Protected)
                .WithMethod("WaitForFullGCApproach", [typeof(System.TimeSpan /*timeout*/),], Accessibility.Protected)
                .WithMethod("WaitForFullGCComplete", [typeof(System.TimeSpan /*timeout*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Math), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MathF), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MulticastDelegate), Accessibility.Public))
            .Allow(new TypeBinding(typeof(System.Object), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.RuntimeTypeHandle), Accessibility.None)
                .WithMethod("ToIntPtr", Accessibility.Protected)
                .WithMethod("op_Equality", [typeof(System.RuntimeTypeHandle /*left*/), typeof(System.Object /*right*/),], Accessibility.Protected)
                .WithMethod("op_Equality", [typeof(System.Object /*left*/), typeof(System.RuntimeTypeHandle /*right*/),], Accessibility.Protected)
                .WithMethod("op_Inequality", [typeof(System.RuntimeTypeHandle /*left*/), typeof(System.Object /*right*/),], Accessibility.Protected)
                .WithMethod("op_Inequality", [typeof(System.Object /*left*/), typeof(System.RuntimeTypeHandle /*right*/),], Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Object /*obj*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.RuntimeTypeHandle /*handle*/),], Accessibility.Protected)
                .WithMethod("get_Value", Accessibility.Protected)
                .WithMethod("GetModuleHandle", Accessibility.Protected)
                .WithMethod("GetObjectData", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.RuntimeMethodHandle), Accessibility.None)
                .WithMethod("GetObjectData", Accessibility.Protected)
                .WithMethod("get_Value", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Object /*obj*/),], Accessibility.Protected)
                .WithMethod("ToIntPtr", Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.RuntimeMethodHandle /*handle*/),], Accessibility.Protected)
                .WithMethod("GetFunctionPointer", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.RuntimeFieldHandle), Accessibility.None)
                .WithMethod("get_Value", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Object /*obj*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.RuntimeFieldHandle /*handle*/),], Accessibility.Protected)
                .WithMethod("ToIntPtr", Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("GetObjectData", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ModuleHandle), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.String), Accessibility.Public)
                .Where(x => x is ConstructorInfo constructor ? constructor.GetParameters().All(y => !y.ParameterType.IsPointer) : true))
            .Allow(new TypeBinding(typeof(System.Type), Accessibility.None)
                .WithField("Delimiter", Accessibility.Protected)
                .WithField("EmptyTypes", Accessibility.Protected)
                .WithField("Missing", Accessibility.Protected)
                .WithField("FilterAttribute", Accessibility.Protected)
                .WithField("FilterName", Accessibility.Protected)
                .WithField("FilterNameIgnoreCase", Accessibility.Protected)
                .WithMethod("get_IsInterface", Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*typeName*/), typeof(System.Boolean /*throwOnError*/), typeof(System.Boolean /*ignoreCase*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*typeName*/), typeof(System.Boolean /*throwOnError*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*typeName*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*typeName*/), typeof(System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> /*assemblyResolver*/), typeof(System.Func<System.Reflection.Assembly, System.String, System.Boolean, System.Type> /*typeResolver*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*typeName*/), typeof(System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> /*assemblyResolver*/), typeof(System.Func<System.Reflection.Assembly, System.String, System.Boolean, System.Type> /*typeResolver*/), typeof(System.Boolean /*throwOnError*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*typeName*/), typeof(System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> /*assemblyResolver*/), typeof(System.Func<System.Reflection.Assembly, System.String, System.Boolean, System.Type> /*typeResolver*/), typeof(System.Boolean /*throwOnError*/), typeof(System.Boolean /*ignoreCase*/),], Accessibility.Protected)
                .WithMethod("GetTypeFromHandle", Accessibility.Protected)
                .WithMethod("get_MemberType", Accessibility.Protected)
                .WithMethod("GetType", [], Accessibility.Protected)
                .WithMethod("get_IsNested", Accessibility.Protected)
                .WithMethod("get_DeclaringType", Accessibility.Protected)
                .WithMethod("get_DeclaringMethod", Accessibility.Protected)
                .WithMethod("get_ReflectedType", Accessibility.Protected)
                .WithMethod("get_IsTypeDefinition", Accessibility.Protected)
                .WithMethod("get_IsArray", Accessibility.Protected)
                .WithMethod("get_IsByRef", Accessibility.Protected)
                .WithMethod("get_IsPointer", Accessibility.Protected)
                .WithMethod("get_IsConstructedGenericType", Accessibility.Protected)
                .WithMethod("get_IsGenericParameter", Accessibility.Protected)
                .WithMethod("get_IsGenericTypeParameter", Accessibility.Protected)
                .WithMethod("get_IsGenericMethodParameter", Accessibility.Protected)
                .WithMethod("get_IsGenericType", Accessibility.Protected)
                .WithMethod("get_IsGenericTypeDefinition", Accessibility.Protected)
                .WithMethod("get_IsSZArray", Accessibility.Protected)
                .WithMethod("get_IsVariableBoundArray", Accessibility.Protected)
                .WithMethod("get_IsByRefLike", Accessibility.Protected)
                .WithMethod("get_IsFunctionPointer", Accessibility.Protected)
                .WithMethod("get_IsUnmanagedFunctionPointer", Accessibility.Protected)
                .WithMethod("get_HasElementType", Accessibility.Protected)
                .WithMethod("GetArrayRank", Accessibility.Protected)
                .WithMethod("GetGenericTypeDefinition", Accessibility.Protected)
                .WithMethod("get_GenericTypeArguments", Accessibility.Protected)
                .WithMethod("GetGenericArguments", Accessibility.Protected)
                .WithMethod("GetOptionalCustomModifiers", Accessibility.Protected)
                .WithMethod("GetRequiredCustomModifiers", Accessibility.Protected)
                .WithMethod("get_GenericParameterPosition", Accessibility.Protected)
                .WithMethod("get_GenericParameterAttributes", Accessibility.Protected)
                .WithMethod("GetGenericParameterConstraints", Accessibility.Protected)
                .WithMethod("get_Attributes", Accessibility.Protected)
                .WithMethod("get_IsAbstract", Accessibility.Protected)
                .WithMethod("get_IsImport", Accessibility.Protected)
                .WithMethod("get_IsSealed", Accessibility.Protected)
                .WithMethod("get_IsSpecialName", Accessibility.Protected)
                .WithMethod("get_IsClass", Accessibility.Protected)
                .WithMethod("get_IsNestedAssembly", Accessibility.Protected)
                .WithMethod("get_IsNestedFamANDAssem", Accessibility.Protected)
                .WithMethod("get_IsNestedFamily", Accessibility.Protected)
                .WithMethod("get_IsNestedFamORAssem", Accessibility.Protected)
                .WithMethod("get_IsNestedPrivate", Accessibility.Protected)
                .WithMethod("get_IsNestedPublic", Accessibility.Protected)
                .WithMethod("get_IsNotPublic", Accessibility.Protected)
                .WithMethod("get_IsPublic", Accessibility.Protected)
                .WithMethod("get_IsAutoLayout", Accessibility.Protected)
                .WithMethod("get_IsExplicitLayout", Accessibility.Protected)
                .WithMethod("get_IsLayoutSequential", Accessibility.Protected)
                .WithMethod("get_IsAnsiClass", Accessibility.Protected)
                .WithMethod("get_IsAutoClass", Accessibility.Protected)
                .WithMethod("get_IsUnicodeClass", Accessibility.Protected)
                .WithMethod("get_IsCOMObject", Accessibility.Protected)
                .WithMethod("get_IsContextful", Accessibility.Protected)
                .WithMethod("get_IsEnum", Accessibility.Protected)
                .WithMethod("get_IsMarshalByRef", Accessibility.Protected)
                .WithMethod("get_IsPrimitive", Accessibility.Protected)
                .WithMethod("get_IsValueType", Accessibility.Protected)
                .WithMethod("IsAssignableTo", Accessibility.Protected)
                .WithMethod("get_IsSignatureType", Accessibility.Protected)
                .WithMethod("get_StructLayoutAttribute", Accessibility.Protected)
                .WithMethod("get_TypeInitializer", Accessibility.Protected)
                .WithMethod("GetConstructor", [typeof(System.Type[] /*types*/),], Accessibility.Protected)
                .WithMethod("GetConstructor", [typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Type[] /*types*/),], Accessibility.Protected)
                .WithMethod("GetConstructor", [typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Reflection.Binder /*binder*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetConstructor", [typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Reflection.Binder /*binder*/), typeof(System.Reflection.CallingConventions /*callConvention*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetConstructors", [], Accessibility.Protected)
                .WithMethod("GetConstructors", [typeof(System.Reflection.BindingFlags /*bindingAttr*/)], Accessibility.Protected)
                .WithMethod("GetEvent", [typeof(string /*name*/),], Accessibility.Protected)
                .WithMethod("GetEvent", [typeof(string /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/)], Accessibility.Protected)
                .WithMethod("GetEvents", [], Accessibility.Protected)
                .WithMethod("GetEvents", [typeof(System.Reflection.BindingFlags /*bindingAttr*/)], Accessibility.Protected)
                .WithMethod("GetField", [typeof(string /*name*/),], Accessibility.Protected)
                .WithMethod("GetField", [typeof(string /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/)], Accessibility.Protected)
                .WithMethod("GetFields", [], Accessibility.Protected)
                .WithMethod("GetFields", [typeof(System.Reflection.BindingFlags /*bindingAttr*/)], Accessibility.Protected)
                .WithMethod("GetFunctionPointerCallingConventions", Accessibility.Protected)
                .WithMethod("GetFunctionPointerReturnType", Accessibility.Protected)
                .WithMethod("GetFunctionPointerParameterTypes", Accessibility.Protected)
                .WithMethod("GetMember", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetMember", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetMember", [typeof(System.String /*name*/), typeof(System.Reflection.MemberTypes /*type*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetMembers", [], Accessibility.Protected)
                .WithMethod("GetMembers", [typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetMemberWithSameMetadataDefinitionAs", Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Type[] /*types*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Type[] /*types*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Reflection.Binder /*binder*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Reflection.Binder /*binder*/), typeof(System.Reflection.CallingConventions /*callConvention*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Int32 /*genericParameterCount*/), typeof(System.Type[] /*types*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Int32 /*genericParameterCount*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Int32 /*genericParameterCount*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Reflection.Binder /*binder*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Int32 /*genericParameterCount*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Reflection.Binder /*binder*/), typeof(System.Reflection.CallingConventions /*callConvention*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetMethods", [], Accessibility.Protected)
                .WithMethod("GetMethods", [typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetNestedType", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetNestedType", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetNestedTypes", [], Accessibility.Protected)
                .WithMethod("GetNestedTypes", [typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetProperty", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetProperty", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetProperty", [typeof(System.String /*name*/), typeof(System.Type /*returnType*/),], Accessibility.Protected)
                .WithMethod("GetProperty", [typeof(System.String /*name*/), typeof(System.Type[] /*types*/),], Accessibility.Protected)
                .WithMethod("GetProperty", [typeof(System.String /*name*/), typeof(System.Type /*returnType*/), typeof(System.Type[] /*types*/),], Accessibility.Protected)
                .WithMethod("GetProperty", [typeof(System.String /*name*/), typeof(System.Type /*returnType*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetProperty", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Reflection.Binder /*binder*/), typeof(System.Type /*returnType*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetProperties", [], Accessibility.Protected)
                .WithMethod("GetProperties", [typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetDefaultMembers", Accessibility.Protected)
                .WithMethod("get_TypeHandle", Accessibility.Protected)
                .WithMethod("GetTypeHandle", Accessibility.Protected)
                .WithMethod("GetTypeArray", Accessibility.Protected)
                .WithMethod("GetTypeCode", Accessibility.Protected)
                .WithMethod("GetTypeFromCLSID", [typeof(System.Guid /*clsid*/),], Accessibility.Protected)
                .WithMethod("GetTypeFromCLSID", [typeof(System.Guid /*clsid*/), typeof(System.Boolean /*throwOnError*/),], Accessibility.Protected)
                .WithMethod("GetTypeFromCLSID", [typeof(System.Guid /*clsid*/), typeof(System.String /*server*/),], Accessibility.Protected)
                .WithMethod("GetTypeFromCLSID", [typeof(System.Guid /*clsid*/), typeof(System.String /*server*/), typeof(System.Boolean /*throwOnError*/),], Accessibility.Protected)
                .WithMethod("GetTypeFromProgID", [typeof(System.String /*progID*/),], Accessibility.Protected)
                .WithMethod("GetTypeFromProgID", [typeof(System.String /*progID*/), typeof(System.Boolean /*throwOnError*/),], Accessibility.Protected)
                .WithMethod("GetTypeFromProgID", [typeof(System.String /*progID*/), typeof(System.String /*server*/),], Accessibility.Protected)
                .WithMethod("GetTypeFromProgID", [typeof(System.String /*progID*/), typeof(System.String /*server*/), typeof(System.Boolean /*throwOnError*/),], Accessibility.Protected)
                .WithMethod("GetInterface", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetInterface", [typeof(System.String /*name*/), typeof(System.Boolean /*ignoreCase*/),], Accessibility.Protected)
                .WithMethod("GetInterfaceMap", Accessibility.Protected)
                .WithMethod("IsInstanceOfType", Accessibility.Protected)
                .WithMethod("IsEquivalentTo", Accessibility.Protected)
                .WithMethod("GetEnumUnderlyingType", Accessibility.Protected)
                .WithMethod("GetEnumValues", Accessibility.Protected)
                .WithMethod("GetEnumValuesAsUnderlyingType", Accessibility.Protected)
                .WithMethod("MakeArrayType", [], Accessibility.Protected)
                .WithMethod("MakeArrayType", [typeof(System.Int32 /*rank*/),], Accessibility.Protected)
                .WithMethod("MakeByRefType", Accessibility.Protected)
                .WithMethod("MakeGenericType", Accessibility.Protected)
                .WithMethod("MakePointerType", Accessibility.Protected)
                .WithMethod("MakeGenericSignatureType", Accessibility.Protected)
                .WithMethod("MakeGenericMethodParameter", Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Object /*o*/),], Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Type /*o*/),], Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("ReflectionOnlyGetType", Accessibility.Protected)
                .WithMethod("get_DefaultBinder", Accessibility.Protected)
                .WithMethod("IsEnumDefined", Accessibility.Protected)
                .WithMethod("GetEnumName", Accessibility.Protected)
                .WithMethod("GetEnumNames", Accessibility.Protected)
                .WithMethod("get_IsSerializable", Accessibility.Protected)
                .WithMethod("get_ContainsGenericParameters", Accessibility.Protected)
                .WithMethod("get_IsVisible", Accessibility.Protected)
                .WithMethod("FindInterfaces", Accessibility.Protected)
                .WithMethod("FindMembers", Accessibility.Protected)
                .WithMethod("IsSubclassOf", Accessibility.Protected)
                .WithMethod("IsAssignableFrom", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TypeLoadException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.AccessViolationException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Action<,,,,,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Comparison<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Converter<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Predicate<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.AggregateException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.AppDomainSetup), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.AppDomainUnloadedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ApplicationException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ApplicationId), Accessibility.None)
                .WithMethod("get_Culture", Accessibility.Protected)
                .WithMethod("get_Name", Accessibility.Protected)
                .WithMethod("get_Version", Accessibility.Protected)
                .WithMethod("get_PublicKeyToken", Accessibility.Protected)
                .WithMethod("Copy", Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ArgumentException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ArgumentNullException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ArgumentOutOfRangeException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ArithmeticException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ArraySegment<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ArrayTypeMismatchException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.AsyncCallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.AttributeTargets), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.AttributeUsageAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.BitConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Boolean), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Byte), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.CannotUnloadAppDomainException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Char), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.CharEnumerator), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.CLSCompliantAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ContextMarshalException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ContextStaticAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Convert), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Base64FormattingOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DataMisalignedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DateOnly), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DateTime), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DateTimeKind), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DateTimeOffset), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DayOfWeek), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DBNull), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DivideByZeroException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DllNotFoundException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Double), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.DuplicateWaitObjectException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.EntryPointNotFoundException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.EnvironmentVariableTarget), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.EventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.EventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.EventHandler<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.FieldAccessException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.FlagsAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.FormatException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.FormattableString), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Func<,,,,,,,,,,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.GCGenerationInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.GCKind), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.GCMemoryInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Guid), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Half), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.HashCode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Index), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IndexOutOfRangeException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.InsufficientExecutionStackException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.InsufficientMemoryException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Int16), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Int32), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Int64), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Int128), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IntPtr), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.InvalidCastException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.InvalidOperationException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.InvalidProgramException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.InvalidTimeZoneException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Lazy<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Lazy<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.LoaderOptimization), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.LoaderOptimizationAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MarshalByRefObject), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MemberAccessException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Memory<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MemoryExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MethodAccessException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MidpointRounding), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MissingFieldException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MissingMemberException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MissingMethodException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MulticastNotSupportedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.NonSerializedAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.NotFiniteNumberException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.NotImplementedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.NotSupportedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Nullable<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Nullable), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.NullReferenceException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ObjectDisposedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ObsoleteAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.OperatingSystem), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.OperationCanceledException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.OutOfMemoryException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.OverflowException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ParamArrayAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.PlatformID), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.PlatformNotSupportedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Progress<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Random), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Range), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.RankException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ReadOnlyMemory<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ReadOnlySpan<>), Accessibility.None)
                //.WithConstructor([typeof(T[] /*array*/),], Accessibility.Protected)
                //.WithConstructor([typeof(T[] /*array*/), typeof(System.Int32 /*start*/), typeof(System.Int32 /*length*/),], Accessibility.Protected)
                //.WithConstructor([typeof(System.ReadOnlySpan<> /*reference*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("get_Item", Accessibility.Protected)
                .WithMethod("get_Length", Accessibility.Protected)
                .WithMethod("get_IsEmpty", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                //.WithMethod("op_Implicit", [typeof(T[] /*array*/),], Accessibility.Protected)
                .WithMethod("op_Implicit", [typeof(System.ArraySegment<> /*segment*/),], Accessibility.Protected)
                .WithMethod("get_Empty", Accessibility.Protected)
                .WithMethod("GetEnumerator", Accessibility.Protected)
                .WithMethod("GetPinnableReference", Accessibility.Protected)
                .WithMethod("CopyTo", Accessibility.Protected)
                .WithMethod("TryCopyTo", Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected)
                .WithMethod("Slice", [typeof(System.Int32 /*start*/),], Accessibility.Protected)
                .WithMethod("Slice", [typeof(System.Int32 /*start*/), typeof(System.Int32 /*length*/),], Accessibility.Protected)
                .WithMethod("ToArray", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ResolveEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ResolveEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.SByte), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.SerializableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Single), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Span<>), Accessibility.None)
                //.WithConstructor([typeof(T[] /*array*/),], Accessibility.Protected)
                //.WithConstructor([typeof(T[] /*array*/), typeof(System.Int32 /*start*/), typeof(System.Int32 /*length*/),], Accessibility.Protected)
                //.WithConstructor([typeof(System.Span<>.T /*reference*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("get_Item", Accessibility.Protected)
                .WithMethod("get_Length", Accessibility.Protected)
                .WithMethod("get_IsEmpty", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                //.WithMethod("op_Implicit", [typeof(T[] /*array*/),], Accessibility.Protected)
                .WithMethod("op_Implicit", [typeof(System.ArraySegment<> /*segment*/),], Accessibility.Protected)
                .WithMethod("get_Empty", Accessibility.Protected)
                .WithMethod("GetEnumerator", Accessibility.Protected)
                .WithMethod("GetPinnableReference", Accessibility.Protected)
                .WithMethod("Clear", Accessibility.Protected)
                .WithMethod("Fill", Accessibility.Protected)
                .WithMethod("CopyTo", Accessibility.Protected)
                .WithMethod("TryCopyTo", Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Implicit", [typeof(System.Span<> /*span*/),], Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected)
                .WithMethod("Slice", [typeof(System.Int32 /*start*/),], Accessibility.Protected)
                .WithMethod("Slice", [typeof(System.Int32 /*start*/), typeof(System.Int32 /*length*/),], Accessibility.Protected)
                .WithMethod("ToArray", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.StackOverflowException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.StringComparer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.StringComparison), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.StringNormalizationExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.StringSplitOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.SystemException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.STAThreadAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.MTAThreadAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ThreadStaticAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TimeOnly), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TimeoutException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TimeSpan), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TimeZoneInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TimeZoneNotFoundException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Tuple), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Tuple<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Tuple<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Tuple<,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Tuple<,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Tuple<,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Tuple<,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Tuple<,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Tuple<,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TupleExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TypeAccessException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TypeCode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TypeInitializationException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TypeUnloadedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.UInt16), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.UInt32), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.UInt64), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.UInt128), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.UIntPtr), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.UnauthorizedAccessException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.UnhandledExceptionEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.UnhandledExceptionEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueTuple), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueTuple<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueTuple<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueTuple<,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueTuple<,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueTuple<,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueTuple<,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueTuple<,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ValueTuple<,,,,,,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Version), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.WeakReference), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.WeakReference<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.TimeProvider), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.BitOperations), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.Matrix3x2), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.Matrix4x4), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.Plane), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.Quaternion), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.Vector), Accessibility.None)
                .WithMethod("get_IsHardwareAccelerated", Accessibility.Protected)
                .WithMethod("Abs", Accessibility.Protected)
                .WithMethod("Add", Accessibility.Protected)
                .WithMethod("AndNot", Accessibility.Protected)
                .WithMethod("As", Accessibility.Protected)
                .WithMethod("AsVectorByte", Accessibility.Protected)
                .WithMethod("AsVectorDouble", Accessibility.Protected)
                .WithMethod("AsVectorInt16", Accessibility.Protected)
                .WithMethod("AsVectorInt32", Accessibility.Protected)
                .WithMethod("AsVectorInt64", Accessibility.Protected)
                .WithMethod("AsVectorNInt", Accessibility.Protected)
                .WithMethod("AsVectorNUInt", Accessibility.Protected)
                .WithMethod("AsVectorSByte", Accessibility.Protected)
                .WithMethod("AsVectorSingle", Accessibility.Protected)
                .WithMethod("AsVectorUInt16", Accessibility.Protected)
                .WithMethod("AsVectorUInt32", Accessibility.Protected)
                .WithMethod("AsVectorUInt64", Accessibility.Protected)
                .WithMethod("BitwiseAnd", Accessibility.Protected)
                .WithMethod("BitwiseOr", Accessibility.Protected)
                .WithMethod("Ceiling", [typeof(System.Numerics.Vector<System.Double> /*value*/),], Accessibility.Protected)
                .WithMethod("Ceiling", [typeof(System.Numerics.Vector<System.Single> /*value*/),], Accessibility.Protected)
                .WithMethod("ConditionalSelect", [typeof(System.Numerics.Vector<> /*condition*/), typeof(System.Numerics.Vector<> /*left*/), typeof(System.Numerics.Vector<> /*right*/),], Accessibility.Protected)
                .WithMethod("ConditionalSelect", [typeof(System.Numerics.Vector<System.Int32> /*condition*/), typeof(System.Numerics.Vector<System.Single> /*left*/), typeof(System.Numerics.Vector<System.Single> /*right*/),], Accessibility.Protected)
                .WithMethod("ConditionalSelect", [typeof(System.Numerics.Vector<System.Int64> /*condition*/), typeof(System.Numerics.Vector<System.Double> /*left*/), typeof(System.Numerics.Vector<System.Double> /*right*/),], Accessibility.Protected)
                .WithMethod("ConvertToDouble", [typeof(System.Numerics.Vector<System.Int64> /*value*/),], Accessibility.Protected)
                .WithMethod("ConvertToDouble", [typeof(System.Numerics.Vector<System.UInt64> /*value*/),], Accessibility.Protected)
                .WithMethod("ConvertToInt32", Accessibility.Protected)
                .WithMethod("ConvertToInt64", Accessibility.Protected)
                .WithMethod("ConvertToSingle", [typeof(System.Numerics.Vector<System.Int32> /*value*/),], Accessibility.Protected)
                .WithMethod("ConvertToSingle", [typeof(System.Numerics.Vector<System.UInt32> /*value*/),], Accessibility.Protected)
                .WithMethod("ConvertToUInt32", Accessibility.Protected)
                .WithMethod("ConvertToUInt64", Accessibility.Protected)
                .WithMethod("Divide", [typeof(System.Numerics.Vector<> /*left*/), typeof(System.Numerics.Vector<> /*right*/),], Accessibility.Protected)
                //.WithMethod("Divide", [typeof(System.Numerics.Vector<> /*left*/), typeof(T /*right*/),], Accessibility.Protected)
                .WithMethod("Dot", Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Numerics.Vector<> /*left*/), typeof(System.Numerics.Vector<> /*right*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Numerics.Vector<System.Double> /*left*/), typeof(System.Numerics.Vector<System.Double> /*right*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Numerics.Vector<System.Int32> /*left*/), typeof(System.Numerics.Vector<System.Int32> /*right*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Numerics.Vector<System.Int64> /*left*/), typeof(System.Numerics.Vector<System.Int64> /*right*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Numerics.Vector<System.Single> /*left*/), typeof(System.Numerics.Vector<System.Single> /*right*/),], Accessibility.Protected)
                .WithMethod("EqualsAll", Accessibility.Protected)
                .WithMethod("EqualsAny", Accessibility.Protected)
                .WithMethod("Floor", [typeof(System.Numerics.Vector<System.Double> /*value*/),], Accessibility.Protected)
                .WithMethod("Floor", [typeof(System.Numerics.Vector<System.Single> /*value*/),], Accessibility.Protected)
                .WithMethod("GetElement", Accessibility.Protected)
                .WithMethod("GreaterThan", [typeof(System.Numerics.Vector<> /*left*/), typeof(System.Numerics.Vector<> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThan", [typeof(System.Numerics.Vector<System.Double> /*left*/), typeof(System.Numerics.Vector<System.Double> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThan", [typeof(System.Numerics.Vector<System.Int32> /*left*/), typeof(System.Numerics.Vector<System.Int32> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThan", [typeof(System.Numerics.Vector<System.Int64> /*left*/), typeof(System.Numerics.Vector<System.Int64> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThan", [typeof(System.Numerics.Vector<System.Single> /*left*/), typeof(System.Numerics.Vector<System.Single> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThanAll", Accessibility.Protected)
                .WithMethod("GreaterThanAny", Accessibility.Protected)
                .WithMethod("GreaterThanOrEqual", [typeof(System.Numerics.Vector<> /*left*/), typeof(System.Numerics.Vector<> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThanOrEqual", [typeof(System.Numerics.Vector<System.Double> /*left*/), typeof(System.Numerics.Vector<System.Double> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThanOrEqual", [typeof(System.Numerics.Vector<System.Int32> /*left*/), typeof(System.Numerics.Vector<System.Int32> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThanOrEqual", [typeof(System.Numerics.Vector<System.Int64> /*left*/), typeof(System.Numerics.Vector<System.Int64> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThanOrEqual", [typeof(System.Numerics.Vector<System.Single> /*left*/), typeof(System.Numerics.Vector<System.Single> /*right*/),], Accessibility.Protected)
                .WithMethod("GreaterThanOrEqualAll", Accessibility.Protected)
                .WithMethod("GreaterThanOrEqualAny", Accessibility.Protected)
                .WithMethod("LessThan", [typeof(System.Numerics.Vector<> /*left*/), typeof(System.Numerics.Vector<> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThan", [typeof(System.Numerics.Vector<System.Double> /*left*/), typeof(System.Numerics.Vector<System.Double> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThan", [typeof(System.Numerics.Vector<System.Int32> /*left*/), typeof(System.Numerics.Vector<System.Int32> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThan", [typeof(System.Numerics.Vector<System.Int64> /*left*/), typeof(System.Numerics.Vector<System.Int64> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThan", [typeof(System.Numerics.Vector<System.Single> /*left*/), typeof(System.Numerics.Vector<System.Single> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThanAll", Accessibility.Protected)
                .WithMethod("LessThanAny", Accessibility.Protected)
                .WithMethod("LessThanOrEqual", [typeof(System.Numerics.Vector<> /*left*/), typeof(System.Numerics.Vector<> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThanOrEqual", [typeof(System.Numerics.Vector<System.Double> /*left*/), typeof(System.Numerics.Vector<System.Double> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThanOrEqual", [typeof(System.Numerics.Vector<System.Int32> /*left*/), typeof(System.Numerics.Vector<System.Int32> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThanOrEqual", [typeof(System.Numerics.Vector<System.Int64> /*left*/), typeof(System.Numerics.Vector<System.Int64> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThanOrEqual", [typeof(System.Numerics.Vector<System.Single> /*left*/), typeof(System.Numerics.Vector<System.Single> /*right*/),], Accessibility.Protected)
                .WithMethod("LessThanOrEqualAll", Accessibility.Protected)
                .WithMethod("LessThanOrEqualAny", Accessibility.Protected)
                .WithMethod("Max", Accessibility.Protected)
                .WithMethod("Min", Accessibility.Protected)
                .WithMethod("Multiply", [typeof(System.Numerics.Vector<> /*left*/), typeof(System.Numerics.Vector<> /*right*/),], Accessibility.Protected)
                //.WithMethod("Multiply", [typeof(System.Numerics.Vector<> /*left*/), typeof(T /*right*/),], Accessibility.Protected)
                //.WithMethod("Multiply", [typeof(T /*left*/), typeof(System.Numerics.Vector<> /*right*/),], Accessibility.Protected)
                .WithMethod("Narrow", [typeof(System.Numerics.Vector<System.Double> /*low*/), typeof(System.Numerics.Vector<System.Double> /*high*/),], Accessibility.Protected)
                .WithMethod("Narrow", [typeof(System.Numerics.Vector<System.Int16> /*low*/), typeof(System.Numerics.Vector<System.Int16> /*high*/),], Accessibility.Protected)
                .WithMethod("Narrow", [typeof(System.Numerics.Vector<System.Int32> /*low*/), typeof(System.Numerics.Vector<System.Int32> /*high*/),], Accessibility.Protected)
                .WithMethod("Narrow", [typeof(System.Numerics.Vector<System.Int64> /*low*/), typeof(System.Numerics.Vector<System.Int64> /*high*/),], Accessibility.Protected)
                .WithMethod("Narrow", [typeof(System.Numerics.Vector<System.UInt16> /*low*/), typeof(System.Numerics.Vector<System.UInt16> /*high*/),], Accessibility.Protected)
                .WithMethod("Narrow", [typeof(System.Numerics.Vector<System.UInt32> /*low*/), typeof(System.Numerics.Vector<System.UInt32> /*high*/),], Accessibility.Protected)
                .WithMethod("Narrow", [typeof(System.Numerics.Vector<System.UInt64> /*low*/), typeof(System.Numerics.Vector<System.UInt64> /*high*/),], Accessibility.Protected)
                .WithMethod("Negate", Accessibility.Protected)
                .WithMethod("OnesComplement", Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.Byte> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.Int16> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.Int32> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.Int64> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.IntPtr> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.UIntPtr> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.SByte> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.UInt16> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.UInt32> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftLeft", [typeof(System.Numerics.Vector<System.UInt64> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightArithmetic", [typeof(System.Numerics.Vector<System.Int16> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightArithmetic", [typeof(System.Numerics.Vector<System.Int32> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightArithmetic", [typeof(System.Numerics.Vector<System.Int64> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightArithmetic", [typeof(System.Numerics.Vector<System.IntPtr> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightArithmetic", [typeof(System.Numerics.Vector<System.SByte> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.Byte> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.Int16> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.Int32> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.Int64> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.IntPtr> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.UIntPtr> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.SByte> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.UInt16> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.UInt32> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("ShiftRightLogical", [typeof(System.Numerics.Vector<System.UInt64> /*value*/), typeof(System.Int32 /*shiftCount*/),], Accessibility.Protected)
                .WithMethod("SquareRoot", Accessibility.Protected)
                .WithMethod("Subtract", Accessibility.Protected)
                .WithMethod("Sum", Accessibility.Protected)
                .WithMethod("ToScalar", Accessibility.Protected)
                .WithMethod("Widen", [typeof(System.Numerics.Vector<System.Byte> /*source*/), typeof(System.Numerics.Vector<System.UInt16> /*low*/).MakeByRefType(), typeof(System.Numerics.Vector<System.UInt16> /*high*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Widen", [typeof(System.Numerics.Vector<System.Int16> /*source*/), typeof(System.Numerics.Vector<System.Int32> /*low*/).MakeByRefType(), typeof(System.Numerics.Vector<System.Int32> /*high*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Widen", [typeof(System.Numerics.Vector<System.Int32> /*source*/), typeof(System.Numerics.Vector<System.Int64> /*low*/).MakeByRefType(), typeof(System.Numerics.Vector<System.Int64> /*high*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Widen", [typeof(System.Numerics.Vector<System.SByte> /*source*/), typeof(System.Numerics.Vector<System.Int16> /*low*/).MakeByRefType(), typeof(System.Numerics.Vector<System.Int16> /*high*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Widen", [typeof(System.Numerics.Vector<System.Single> /*source*/), typeof(System.Numerics.Vector<System.Double> /*low*/).MakeByRefType(), typeof(System.Numerics.Vector<System.Double> /*high*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Widen", [typeof(System.Numerics.Vector<System.UInt16> /*source*/), typeof(System.Numerics.Vector<System.UInt32> /*low*/).MakeByRefType(), typeof(System.Numerics.Vector<System.UInt32> /*high*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Widen", [typeof(System.Numerics.Vector<System.UInt32> /*source*/), typeof(System.Numerics.Vector<System.UInt64> /*low*/).MakeByRefType(), typeof(System.Numerics.Vector<System.UInt64> /*high*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("WidenLower", [typeof(System.Numerics.Vector<System.Byte> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenLower", [typeof(System.Numerics.Vector<System.Int16> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenLower", [typeof(System.Numerics.Vector<System.Int32> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenLower", [typeof(System.Numerics.Vector<System.SByte> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenLower", [typeof(System.Numerics.Vector<System.Single> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenLower", [typeof(System.Numerics.Vector<System.UInt16> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenLower", [typeof(System.Numerics.Vector<System.UInt32> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenUpper", [typeof(System.Numerics.Vector<System.Byte> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenUpper", [typeof(System.Numerics.Vector<System.Int16> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenUpper", [typeof(System.Numerics.Vector<System.Int32> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenUpper", [typeof(System.Numerics.Vector<System.SByte> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenUpper", [typeof(System.Numerics.Vector<System.Single> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenUpper", [typeof(System.Numerics.Vector<System.UInt16> /*source*/),], Accessibility.Protected)
                .WithMethod("WidenUpper", [typeof(System.Numerics.Vector<System.UInt32> /*source*/),], Accessibility.Protected)
                .WithMethod("WithElement", Accessibility.Protected)
                .WithMethod("Xor", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.TotalOrderIeee754Comparer<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.Vector<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.Vector2), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.Vector3), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.Vector4), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IAdditionOperators<,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IBinaryInteger<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IBinaryNumber<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IDecrementOperators<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IDivisionOperators<,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IExponentialFunctions<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IFloatingPoint<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IFloatingPointIeee754<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IIncrementOperators<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.ILogarithmicFunctions<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IMultiplyOperators<,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.INumber<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.INumberBase<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.ISubtractionOperators<,,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.ITrigonometricFunctions<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Numerics.IUnaryNegationOperators<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.Calendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.CalendarAlgorithmType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.CalendarWeekRule), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.CharUnicodeInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.ChineseLunisolarCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.CompareInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.CompareOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.CultureInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.CultureNotFoundException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.CultureTypes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.DateTimeFormatInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.DateTimeStyles), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.DaylightTime), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.DigitShapes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.EastAsianLunisolarCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.GlobalizationExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.GregorianCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.GregorianCalendarTypes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.HebrewCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.HijriCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.IdnMapping), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.ISOWeek), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.JapaneseCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.JapaneseLunisolarCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.JulianCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.KoreanCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.KoreanLunisolarCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.NumberFormatInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.NumberStyles), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.PersianCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.RegionInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.SortKey), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.SortVersion), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.StringInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.TaiwanCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.TaiwanLunisolarCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.TextElementEnumerator), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.TextInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.ThaiBuddhistCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.TimeSpanStyles), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.UmAlQuraCalendar), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Globalization.UnicodeCategory), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Configuration.Assemblies.AssemblyHashAlgorithm), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Configuration.Assemblies.AssemblyVersionCompatibility), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.DefaultValueAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.EditorBrowsableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.EditorBrowsableState), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.ComponentModel.Win32Exception), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.CodeDom.Compiler.GeneratedCodeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.CodeDom.Compiler.IndentedTextWriter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.SpanAction<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.ReadOnlySpanAction<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.ArrayPool<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.MemoryHandle), Accessibility.None)
                .WithMethod("get_Pointer", Accessibility.Protected)
                .WithMethod("Dispose", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.MemoryManager<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.OperationStatus), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.StandardFormat), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.SearchValues), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.SearchValues<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.Text.Base64), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.Text.Utf8Formatter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.Text.Utf8Parser), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Buffers.Binary.BinaryPrimitives), Accessibility.None)
                .WithMethod("ReadDoubleBigEndian", Accessibility.Protected)
                .WithMethod("ReadHalfBigEndian", Accessibility.Protected)
                .WithMethod("ReadInt16BigEndian", Accessibility.Protected)
                .WithMethod("ReadInt32BigEndian", Accessibility.Protected)
                .WithMethod("ReadInt64BigEndian", Accessibility.Protected)
                .WithMethod("ReadInt128BigEndian", Accessibility.Protected)
                .WithMethod("ReadIntPtrBigEndian", Accessibility.Protected)
                .WithMethod("ReadSingleBigEndian", Accessibility.Protected)
                .WithMethod("ReadUInt16BigEndian", Accessibility.Protected)
                .WithMethod("ReadUInt32BigEndian", Accessibility.Protected)
                .WithMethod("ReadUInt64BigEndian", Accessibility.Protected)
                .WithMethod("ReadUInt128BigEndian", Accessibility.Protected)
                .WithMethod("ReadUIntPtrBigEndian", Accessibility.Protected)
                .WithMethod("TryReadDoubleBigEndian", Accessibility.Protected)
                .WithMethod("TryReadHalfBigEndian", Accessibility.Protected)
                .WithMethod("TryReadInt16BigEndian", Accessibility.Protected)
                .WithMethod("TryReadInt32BigEndian", Accessibility.Protected)
                .WithMethod("TryReadInt64BigEndian", Accessibility.Protected)
                .WithMethod("TryReadInt128BigEndian", Accessibility.Protected)
                .WithMethod("TryReadIntPtrBigEndian", Accessibility.Protected)
                .WithMethod("TryReadSingleBigEndian", Accessibility.Protected)
                .WithMethod("TryReadUInt16BigEndian", Accessibility.Protected)
                .WithMethod("TryReadUInt32BigEndian", Accessibility.Protected)
                .WithMethod("TryReadUInt64BigEndian", Accessibility.Protected)
                .WithMethod("TryReadUInt128BigEndian", Accessibility.Protected)
                .WithMethod("TryReadUIntPtrBigEndian", Accessibility.Protected)
                .WithMethod("ReadDoubleLittleEndian", Accessibility.Protected)
                .WithMethod("ReadHalfLittleEndian", Accessibility.Protected)
                .WithMethod("ReadInt16LittleEndian", Accessibility.Protected)
                .WithMethod("ReadInt32LittleEndian", Accessibility.Protected)
                .WithMethod("ReadInt64LittleEndian", Accessibility.Protected)
                .WithMethod("ReadInt128LittleEndian", Accessibility.Protected)
                .WithMethod("ReadIntPtrLittleEndian", Accessibility.Protected)
                .WithMethod("ReadSingleLittleEndian", Accessibility.Protected)
                .WithMethod("ReadUInt16LittleEndian", Accessibility.Protected)
                .WithMethod("ReadUInt32LittleEndian", Accessibility.Protected)
                .WithMethod("ReadUInt64LittleEndian", Accessibility.Protected)
                .WithMethod("ReadUInt128LittleEndian", Accessibility.Protected)
                .WithMethod("ReadUIntPtrLittleEndian", Accessibility.Protected)
                .WithMethod("TryReadDoubleLittleEndian", Accessibility.Protected)
                .WithMethod("TryReadHalfLittleEndian", Accessibility.Protected)
                .WithMethod("TryReadInt16LittleEndian", Accessibility.Protected)
                .WithMethod("TryReadInt32LittleEndian", Accessibility.Protected)
                .WithMethod("TryReadInt64LittleEndian", Accessibility.Protected)
                .WithMethod("TryReadInt128LittleEndian", Accessibility.Protected)
                .WithMethod("TryReadIntPtrLittleEndian", Accessibility.Protected)
                .WithMethod("TryReadSingleLittleEndian", Accessibility.Protected)
                .WithMethod("TryReadUInt16LittleEndian", Accessibility.Protected)
                .WithMethod("TryReadUInt32LittleEndian", Accessibility.Protected)
                .WithMethod("TryReadUInt64LittleEndian", Accessibility.Protected)
                .WithMethod("TryReadUInt128LittleEndian", Accessibility.Protected)
                .WithMethod("TryReadUIntPtrLittleEndian", Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.SByte /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.Int16 /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.Int128 /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.Byte /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.UInt16 /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.UInt128 /*value*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.UInt16> /*source*/), typeof(System.Span<System.UInt16> /*destination*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.Int16> /*source*/), typeof(System.Span<System.Int16> /*destination*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.UInt32> /*source*/), typeof(System.Span<System.UInt32> /*destination*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.Int32> /*source*/), typeof(System.Span<System.Int32> /*destination*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.UInt64> /*source*/), typeof(System.Span<System.UInt64> /*destination*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.Int64> /*source*/), typeof(System.Span<System.Int64> /*destination*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.UIntPtr> /*source*/), typeof(System.Span<System.UIntPtr> /*destination*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.IntPtr> /*source*/), typeof(System.Span<System.IntPtr> /*destination*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.UInt128> /*source*/), typeof(System.Span<System.UInt128> /*destination*/),], Accessibility.Protected)
                .WithMethod("ReverseEndianness", [typeof(System.ReadOnlySpan<System.Int128> /*source*/), typeof(System.Span<System.Int128> /*destination*/),], Accessibility.Protected)
                .WithMethod("WriteDoubleBigEndian", Accessibility.Protected)
                .WithMethod("WriteHalfBigEndian", Accessibility.Protected)
                .WithMethod("WriteInt16BigEndian", Accessibility.Protected)
                .WithMethod("WriteInt32BigEndian", Accessibility.Protected)
                .WithMethod("WriteInt64BigEndian", Accessibility.Protected)
                .WithMethod("WriteInt128BigEndian", Accessibility.Protected)
                .WithMethod("WriteSingleBigEndian", Accessibility.Protected)
                .WithMethod("WriteUInt16BigEndian", Accessibility.Protected)
                .WithMethod("WriteUInt32BigEndian", Accessibility.Protected)
                .WithMethod("WriteUInt64BigEndian", Accessibility.Protected)
                .WithMethod("WriteUInt128BigEndian", Accessibility.Protected)
                .WithMethod("TryWriteDoubleBigEndian", Accessibility.Protected)
                .WithMethod("TryWriteHalfBigEndian", Accessibility.Protected)
                .WithMethod("TryWriteInt16BigEndian", Accessibility.Protected)
                .WithMethod("TryWriteInt32BigEndian", Accessibility.Protected)
                .WithMethod("TryWriteInt64BigEndian", Accessibility.Protected)
                .WithMethod("TryWriteInt128BigEndian", Accessibility.Protected)
                .WithMethod("TryWriteSingleBigEndian", Accessibility.Protected)
                .WithMethod("TryWriteUInt16BigEndian", Accessibility.Protected)
                .WithMethod("TryWriteUInt32BigEndian", Accessibility.Protected)
                .WithMethod("TryWriteUInt64BigEndian", Accessibility.Protected)
                .WithMethod("TryWriteUInt128BigEndian", Accessibility.Protected)
                .WithMethod("WriteDoubleLittleEndian", Accessibility.Protected)
                .WithMethod("WriteHalfLittleEndian", Accessibility.Protected)
                .WithMethod("WriteInt16LittleEndian", Accessibility.Protected)
                .WithMethod("WriteInt32LittleEndian", Accessibility.Protected)
                .WithMethod("WriteInt64LittleEndian", Accessibility.Protected)
                .WithMethod("WriteInt128LittleEndian", Accessibility.Protected)
                .WithMethod("WriteSingleLittleEndian", Accessibility.Protected)
                .WithMethod("WriteUInt16LittleEndian", Accessibility.Protected)
                .WithMethod("WriteUInt32LittleEndian", Accessibility.Protected)
                .WithMethod("WriteUInt64LittleEndian", Accessibility.Protected)
                .WithMethod("WriteUInt128LittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteDoubleLittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteHalfLittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteInt16LittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteInt32LittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteInt64LittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteInt128LittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteSingleLittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteUInt16LittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteUInt32LittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteUInt64LittleEndian", Accessibility.Protected)
                .WithMethod("TryWriteUInt128LittleEndian", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Interlocked), Accessibility.None)
                .WithMethod("Increment", [typeof(System.Int32 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Increment", [typeof(System.Int64 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Decrement", [typeof(System.Int32 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Decrement", [typeof(System.Int64 /*location*/).MakeByRefType(),], Accessibility.Protected)
                //.WithMethod("Exchange", [typeof(T /*location1*/).MakeByRefType(), typeof(T /*value*/),], Accessibility.Protected)
                //.WithMethod("CompareExchange", [typeof(T /*location1*/).MakeByRefType(), typeof(T /*value*/), typeof(T /*comparand*/),], Accessibility.Protected)
                .WithMethod("Add", [typeof(System.Int32 /*location1*/).MakeByRefType(), typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("Add", [typeof(System.Int64 /*location1*/).MakeByRefType(), typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.Int64 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Increment", [typeof(System.UInt32 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Increment", [typeof(System.UInt64 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Decrement", [typeof(System.UInt32 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Decrement", [typeof(System.UInt64 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Exchange", [typeof(System.UInt32 /*location1*/).MakeByRefType(), typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("Exchange", [typeof(System.UInt64 /*location1*/).MakeByRefType(), typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("Exchange", [typeof(System.Single /*location1*/).MakeByRefType(), typeof(System.Single /*value*/),], Accessibility.Protected)
                .WithMethod("Exchange", [typeof(System.Double /*location1*/).MakeByRefType(), typeof(System.Double /*value*/),], Accessibility.Protected)
                .WithMethod("CompareExchange", [typeof(System.UInt32 /*location1*/).MakeByRefType(), typeof(System.UInt32 /*value*/), typeof(System.UInt32 /*comparand*/),], Accessibility.Protected)
                .WithMethod("CompareExchange", [typeof(System.UInt64 /*location1*/).MakeByRefType(), typeof(System.UInt64 /*value*/), typeof(System.UInt64 /*comparand*/),], Accessibility.Protected)
                .WithMethod("CompareExchange", [typeof(System.Single /*location1*/).MakeByRefType(), typeof(System.Single /*value*/), typeof(System.Single /*comparand*/),], Accessibility.Protected)
                .WithMethod("CompareExchange", [typeof(System.Double /*location1*/).MakeByRefType(), typeof(System.Double /*value*/), typeof(System.Double /*comparand*/),], Accessibility.Protected)
                .WithMethod("Add", [typeof(System.UInt32 /*location1*/).MakeByRefType(), typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("Add", [typeof(System.UInt64 /*location1*/).MakeByRefType(), typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.UInt64 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("And", [typeof(System.Int32 /*location1*/).MakeByRefType(), typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("And", [typeof(System.UInt32 /*location1*/).MakeByRefType(), typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("And", [typeof(System.Int64 /*location1*/).MakeByRefType(), typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("And", [typeof(System.UInt64 /*location1*/).MakeByRefType(), typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("Or", [typeof(System.Int32 /*location1*/).MakeByRefType(), typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("Or", [typeof(System.UInt32 /*location1*/).MakeByRefType(), typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("Or", [typeof(System.Int64 /*location1*/).MakeByRefType(), typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("Or", [typeof(System.UInt64 /*location1*/).MakeByRefType(), typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("MemoryBarrier", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Monitor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.SynchronizationContext), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Thread), Accessibility.None)
                .WithMethod("SpinWait", Accessibility.Protected)
                .WithMethod("Yield", Accessibility.Protected)
                .WithMethod("get_IsBackground", Accessibility.Protected)
                .WithMethod("set_IsBackground", Accessibility.Protected)
                .WithMethod("get_Priority", Accessibility.Protected)
                .WithMethod("set_Priority", Accessibility.Protected)
                .WithMethod("get_ThreadState", Accessibility.Protected)
                .WithMethod("GetApartmentState", Accessibility.Protected)
                .WithConstructor([typeof(System.Threading.ThreadStart /*start*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Threading.ThreadStart /*start*/), typeof(System.Int32 /*maxStackSize*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Threading.ParameterizedThreadStart /*start*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Threading.ParameterizedThreadStart /*start*/), typeof(System.Int32 /*maxStackSize*/),], Accessibility.Protected)
                .WithMethod("Start", [typeof(System.Object /*parameter*/),], Accessibility.Protected)
                .WithMethod("Start", [], Accessibility.Protected)
                .WithMethod("get_CurrentCulture", Accessibility.Protected)
                .WithMethod("set_CurrentCulture", Accessibility.Protected)
                .WithMethod("get_CurrentUICulture", Accessibility.Protected)
                .WithMethod("set_CurrentUICulture", Accessibility.Protected)
                .WithMethod("get_CurrentThread", Accessibility.Protected)
                .WithMethod("Sleep", [typeof(System.Int32 /*millisecondsTimeout*/),], Accessibility.Protected)
                .WithMethod("get_ExecutionContext", Accessibility.Protected)
                .WithMethod("get_Name", Accessibility.Protected)
                .WithMethod("set_Name", Accessibility.Protected)
                .WithMethod("Abort", [], Accessibility.Protected)
                .WithMethod("Abort", [typeof(System.Object /*stateInfo*/),], Accessibility.Protected)
                .WithMethod("ResetAbort", Accessibility.Protected)
                .WithMethod("Suspend", Accessibility.Protected)
                .WithMethod("Resume", Accessibility.Protected)
                .WithMethod("BeginCriticalRegion", Accessibility.Protected)
                .WithMethod("EndCriticalRegion", Accessibility.Protected)
                .WithMethod("BeginThreadAffinity", Accessibility.Protected)
                .WithMethod("EndThreadAffinity", Accessibility.Protected)
                .WithMethod("AllocateDataSlot", Accessibility.Protected)
                .WithMethod("AllocateNamedDataSlot", Accessibility.Protected)
                .WithMethod("GetNamedDataSlot", Accessibility.Protected)
                .WithMethod("FreeNamedDataSlot", Accessibility.Protected)
                .WithMethod("GetData", Accessibility.Protected)
                .WithMethod("SetData", Accessibility.Protected)
                .WithMethod("get_ApartmentState", Accessibility.Protected)
                .WithMethod("set_ApartmentState", Accessibility.Protected)
                .WithMethod("SetApartmentState", Accessibility.Protected)
                .WithMethod("TrySetApartmentState", Accessibility.Protected)
                .WithMethod("GetCompressedStack", Accessibility.Protected)
                .WithMethod("SetCompressedStack", Accessibility.Protected)
                .WithMethod("GetDomain", Accessibility.Protected)
                .WithMethod("GetDomainID", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("Join", [], Accessibility.Protected)
                .WithMethod("Join", [typeof(System.TimeSpan /*timeout*/),], Accessibility.Protected)
                .WithMethod("MemoryBarrier", Accessibility.Protected)
                .WithMethod("Sleep", [typeof(System.TimeSpan /*timeout*/),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.Byte /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.Double /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.Int16 /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.Int32 /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.Int64 /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.IntPtr /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.Object /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.SByte /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.Single /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.UInt16 /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.UInt32 /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.UInt64 /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileRead", [typeof(System.UIntPtr /*address*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.Byte /*address*/).MakeByRefType(), typeof(System.Byte /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.Double /*address*/).MakeByRefType(), typeof(System.Double /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.Int16 /*address*/).MakeByRefType(), typeof(System.Int16 /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.Int32 /*address*/).MakeByRefType(), typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.Int64 /*address*/).MakeByRefType(), typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.Object /*address*/).MakeByRefType(), typeof(System.Object /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.SByte /*address*/).MakeByRefType(), typeof(System.SByte /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.Single /*address*/).MakeByRefType(), typeof(System.Single /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.UInt16 /*address*/).MakeByRefType(), typeof(System.UInt16 /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.UInt32 /*address*/).MakeByRefType(), typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("VolatileWrite", [typeof(System.UInt64 /*address*/).MakeByRefType(), typeof(System.UInt64 /*value*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadPool), Accessibility.None)
                .WithMethod("RegisterWaitForSingleObject", [typeof(System.Threading.WaitHandle /*waitObject*/), typeof(System.Threading.WaitOrTimerCallback /*callBack*/), typeof(System.Object /*state*/), typeof(System.UInt32 /*millisecondsTimeOutInterval*/), typeof(System.Boolean /*executeOnlyOnce*/),], Accessibility.Protected)
                .WithMethod("RegisterWaitForSingleObject", [typeof(System.Threading.WaitHandle /*waitObject*/), typeof(System.Threading.WaitOrTimerCallback /*callBack*/), typeof(System.Object /*state*/), typeof(System.Int32 /*millisecondsTimeOutInterval*/), typeof(System.Boolean /*executeOnlyOnce*/),], Accessibility.Protected)
                .WithMethod("RegisterWaitForSingleObject", [typeof(System.Threading.WaitHandle /*waitObject*/), typeof(System.Threading.WaitOrTimerCallback /*callBack*/), typeof(System.Object /*state*/), typeof(System.Int64 /*millisecondsTimeOutInterval*/), typeof(System.Boolean /*executeOnlyOnce*/),], Accessibility.Protected)
                .WithMethod("RegisterWaitForSingleObject", [typeof(System.Threading.WaitHandle /*waitObject*/), typeof(System.Threading.WaitOrTimerCallback /*callBack*/), typeof(System.Object /*state*/), typeof(System.TimeSpan /*timeout*/), typeof(System.Boolean /*executeOnlyOnce*/),], Accessibility.Protected)
                .WithMethod("QueueUserWorkItem", [typeof(System.Threading.WaitCallback /*callBack*/),], Accessibility.Protected)
                .WithMethod("QueueUserWorkItem", [typeof(System.Threading.WaitCallback /*callBack*/), typeof(System.Object /*state*/),], Accessibility.Protected)
                //.WithMethod("QueueUserWorkItem", [typeof(System.Action<> /*callBack*/), typeof(TState /*state*/), typeof(System.Boolean /*preferLocal*/),], Accessibility.Protected)
                .WithMethod("get_PendingWorkItemCount", Accessibility.Protected)
                .WithMethod("BindHandle", [typeof(System.Runtime.InteropServices.SafeHandle /*osHandle*/),], Accessibility.Protected)
                .WithMethod("SetMaxThreads", Accessibility.Protected)
                .WithMethod("GetMaxThreads", Accessibility.Protected)
                .WithMethod("SetMinThreads", Accessibility.Protected)
                .WithMethod("GetMinThreads", Accessibility.Protected)
                .WithMethod("GetAvailableThreads", Accessibility.Protected)
                .WithMethod("get_ThreadCount", Accessibility.Protected)
                .WithMethod("get_CompletedWorkItemCount", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.WaitHandle), Accessibility.None)
                .WithField("WaitTimeout", Accessibility.Protected)
                .WithMethod("get_Handle", Accessibility.Protected)
                .WithMethod("Close", Accessibility.Protected)
                .WithMethod("Dispose", [], Accessibility.Protected)
                .WithMethod("Dispose", [typeof(System.Boolean /*explicitDisposing*/)], Accessibility.Protected)
                .WithMethod("WaitOne", [typeof(System.Int32 /*millisecondsTimeout*/),], Accessibility.Protected)
                .WithMethod("WaitOne", [typeof(System.TimeSpan /*timeout*/),], Accessibility.Protected)
                .WithMethod("WaitOne", [], Accessibility.Protected)
                .WithMethod("WaitOne", [typeof(System.Int32 /*millisecondsTimeout*/), typeof(System.Boolean /*exitContext*/),], Accessibility.Protected)
                .WithMethod("WaitOne", [typeof(System.TimeSpan /*timeout*/), typeof(System.Boolean /*exitContext*/),], Accessibility.Protected)
                .WithMethod("WaitAll", [typeof(System.Threading.WaitHandle[] /*waitHandles*/), typeof(System.Int32 /*millisecondsTimeout*/),], Accessibility.Protected)
                .WithMethod("WaitAll", [typeof(System.Threading.WaitHandle[] /*waitHandles*/), typeof(System.TimeSpan /*timeout*/),], Accessibility.Protected)
                .WithMethod("WaitAll", [typeof(System.Threading.WaitHandle[] /*waitHandles*/),], Accessibility.Protected)
                .WithMethod("WaitAll", [typeof(System.Threading.WaitHandle[] /*waitHandles*/), typeof(System.Int32 /*millisecondsTimeout*/), typeof(System.Boolean /*exitContext*/),], Accessibility.Protected)
                .WithMethod("WaitAll", [typeof(System.Threading.WaitHandle[] /*waitHandles*/), typeof(System.TimeSpan /*timeout*/), typeof(System.Boolean /*exitContext*/),], Accessibility.Protected)
                .WithMethod("WaitAny", [typeof(System.Threading.WaitHandle[] /*waitHandles*/), typeof(System.Int32 /*millisecondsTimeout*/),], Accessibility.Protected)
                .WithMethod("WaitAny", [typeof(System.Threading.WaitHandle[] /*waitHandles*/), typeof(System.TimeSpan /*timeout*/),], Accessibility.Protected)
                .WithMethod("WaitAny", [typeof(System.Threading.WaitHandle[] /*waitHandles*/),], Accessibility.Protected)
                .WithMethod("WaitAny", [typeof(System.Threading.WaitHandle[] /*waitHandles*/), typeof(System.Int32 /*millisecondsTimeout*/), typeof(System.Boolean /*exitContext*/),], Accessibility.Protected)
                .WithMethod("WaitAny", [typeof(System.Threading.WaitHandle[] /*waitHandles*/), typeof(System.TimeSpan /*timeout*/), typeof(System.Boolean /*exitContext*/),], Accessibility.Protected)
                .WithMethod("SignalAndWait", [typeof(System.Threading.WaitHandle /*toSignal*/), typeof(System.Threading.WaitHandle /*toWaitOn*/),], Accessibility.Protected)
                .WithMethod("SignalAndWait", [typeof(System.Threading.WaitHandle /*toSignal*/), typeof(System.Threading.WaitHandle /*toWaitOn*/), typeof(System.TimeSpan /*timeout*/), typeof(System.Boolean /*exitContext*/),], Accessibility.Protected)
                .WithMethod("SignalAndWait", [typeof(System.Threading.WaitHandle /*toSignal*/), typeof(System.Threading.WaitHandle /*toWaitOn*/), typeof(System.Int32 /*millisecondsTimeout*/), typeof(System.Boolean /*exitContext*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.AbandonedMutexException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ApartmentState), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.AsyncLocal<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.AsyncLocalValueChangedArgs<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.AutoResetEvent), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.CancellationToken), Accessibility.None)
                .WithMethod("get_None", Accessibility.Protected)
                .WithMethod("get_IsCancellationRequested", Accessibility.Protected)
                .WithMethod("get_CanBeCanceled", Accessibility.Protected)
                .WithMethod("get_WaitHandle", Accessibility.Protected)
                .WithConstructor(Accessibility.Protected)
                .WithMethod("Register", [typeof(System.Action /*callback*/),], Accessibility.Protected)
                .WithMethod("Register", [typeof(System.Action /*callback*/), typeof(System.Boolean /*useSynchronizationContext*/),], Accessibility.Protected)
                .WithMethod("Register", [typeof(System.Action<System.Object> /*callback*/), typeof(System.Object /*state*/),], Accessibility.Protected)
                .WithMethod("Register", [typeof(System.Action<System.Object, System.Threading.CancellationToken> /*callback*/), typeof(System.Object /*state*/),], Accessibility.Protected)
                .WithMethod("Register", [typeof(System.Action<System.Object> /*callback*/), typeof(System.Object /*state*/), typeof(System.Boolean /*useSynchronizationContext*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Threading.CancellationToken /*other*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Object /*other*/),], Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("ThrowIfCancellationRequested", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.CancellationTokenRegistration), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.CancellationTokenSource), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.CompressedStack), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.EventResetMode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.EventWaitHandle), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ContextCallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ExecutionContext), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.AsyncFlowControl), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.LazyInitializer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.LazyThreadSafetyMode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.LockRecursionException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ManualResetEvent), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ManualResetEventSlim), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Mutex), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.NativeOverlapped), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Overlapped), Accessibility.None)
                .WithConstructor([], Accessibility.Protected)
                .WithConstructor([typeof(System.Int32 /*offsetLo*/), typeof(System.Int32 /*offsetHi*/), typeof(System.Int32 /*hEvent*/), typeof(System.IAsyncResult /*ar*/),], Accessibility.Protected)
                .WithMethod("get_AsyncResult", Accessibility.Protected)
                .WithMethod("set_AsyncResult", Accessibility.Protected)
                .WithMethod("get_OffsetLow", Accessibility.Protected)
                .WithMethod("set_OffsetLow", Accessibility.Protected)
                .WithMethod("get_OffsetHigh", Accessibility.Protected)
                .WithMethod("set_OffsetHigh", Accessibility.Protected)
                .WithMethod("get_EventHandle", Accessibility.Protected)
                .WithMethod("set_EventHandle", Accessibility.Protected)
                .WithMethod("get_EventHandleIntPtr", Accessibility.Protected)
                .WithMethod("Pack", [typeof(System.Threading.IOCompletionCallback /*iocb*/),], Accessibility.Protected)
                .WithMethod("Pack", [typeof(System.Threading.IOCompletionCallback /*iocb*/), typeof(System.Object /*userData*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ParameterizedThreadStart), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.LockRecursionPolicy), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ReaderWriterLockSlim), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Semaphore), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.SemaphoreFullException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.SemaphoreSlim), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.SendOrPostCallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.SpinLock), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.SpinWait), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.SynchronizationLockException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadAbortException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadExceptionEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadExceptionEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadInterruptedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadLocal<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.WaitCallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.WaitOrTimerCallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadPriority), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadStart), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadState), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.ThreadStateException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Timeout), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.PeriodicTimer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.TimerCallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Timer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Volatile), Accessibility.None)
                .WithMethod("Read", [typeof(System.Boolean /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Boolean /*location*/).MakeByRefType(), typeof(System.Boolean /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.Byte /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Byte /*location*/).MakeByRefType(), typeof(System.Byte /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.Double /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Double /*location*/).MakeByRefType(), typeof(System.Double /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.Int16 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Int16 /*location*/).MakeByRefType(), typeof(System.Int16 /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.Int32 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Int32 /*location*/).MakeByRefType(), typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.Int64 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Int64 /*location*/).MakeByRefType(), typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.IntPtr /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.SByte /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.SByte /*location*/).MakeByRefType(), typeof(System.SByte /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.Single /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Single /*location*/).MakeByRefType(), typeof(System.Single /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.UInt16 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.UInt16 /*location*/).MakeByRefType(), typeof(System.UInt16 /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.UInt32 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.UInt32 /*location*/).MakeByRefType(), typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.UInt64 /*location*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.UInt64 /*location*/).MakeByRefType(), typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.UIntPtr /*location*/).MakeByRefType(),], Accessibility.Protected))
            //.WithMethod("Read", [typeof(T /*location*/).MakeByRefType(),], Accessibility.Protected)
            //.WithMethod("Write", [typeof(T /*location*/).MakeByRefType(), typeof(T /*value*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.WaitHandleCannotBeOpenedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.RegisteredWaitHandle), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.PreAllocatedOverlapped), Accessibility.None)
                .WithConstructor(Accessibility.Protected)
                .WithMethod("Dispose", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.ConcurrentExclusiveSchedulerPair), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.ConfigureAwaitOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.Task<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskFactory<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskStatus), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.Task), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskCreationOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskContinuationOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskAsyncEnumerableExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskCanceledException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskCompletionSource), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskCompletionSource<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskFactory), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskScheduler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.UnobservedTaskExceptionEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskSchedulerException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.ValueTask), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.ValueTask<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.TaskToAsyncResult), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.Sources.ValueTaskSourceStatus), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.StringBuilder), Accessibility.None)
                .WithConstructor([], Accessibility.Protected)
                .WithConstructor([typeof(System.Int32 /*capacity*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*value*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*value*/), typeof(System.Int32 /*capacity*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*value*/), typeof(System.Int32 /*startIndex*/), typeof(System.Int32 /*length*/), typeof(System.Int32 /*capacity*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Int32 /*capacity*/), typeof(System.Int32 /*maxCapacity*/),], Accessibility.Protected)
                .WithMethod("get_Capacity", Accessibility.Protected)
                .WithMethod("set_Capacity", Accessibility.Protected)
                .WithMethod("get_MaxCapacity", Accessibility.Protected)
                .WithMethod("EnsureCapacity", Accessibility.Protected)
                .WithMethod("ToString", [], Accessibility.Protected)
                .WithMethod("ToString", [typeof(System.Int32 /*startIndex*/), typeof(System.Int32 /*length*/),], Accessibility.Protected)
                .WithMethod("Clear", Accessibility.Protected)
                .WithMethod("get_Length", Accessibility.Protected)
                .WithMethod("set_Length", Accessibility.Protected)
                .WithMethod("get_Chars", Accessibility.Protected)
                .WithMethod("set_Chars", Accessibility.Protected)
                .WithMethod("GetChunks", Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Char /*value*/), typeof(System.Int32 /*repeatCount*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Char[] /*value*/), typeof(System.Int32 /*startIndex*/), typeof(System.Int32 /*charCount*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.String /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.String /*value*/), typeof(System.Int32 /*startIndex*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Text.StringBuilder /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Text.StringBuilder /*value*/), typeof(System.Int32 /*startIndex*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("AppendLine", [], Accessibility.Protected)
                .WithMethod("AppendLine", [typeof(System.String /*value*/),], Accessibility.Protected)
                .WithMethod("CopyTo", [typeof(System.Int32 /*sourceIndex*/), typeof(System.Char[] /*destination*/), typeof(System.Int32 /*destinationIndex*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("CopyTo", [typeof(System.Int32 /*sourceIndex*/), typeof(System.Span<System.Char> /*destination*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.String /*value*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Remove", Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Boolean /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Char /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.SByte /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Byte /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Int16 /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Single /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Double /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Decimal /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.UInt16 /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Object /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Char[] /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.ReadOnlySpan<System.Char> /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.ReadOnlyMemory<System.Char> /*value*/),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.Text.StringBuilder.AppendInterpolatedStringHandler /*handler*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Append", [typeof(System.IFormatProvider /*provider*/), typeof(System.Text.StringBuilder.AppendInterpolatedStringHandler /*handler*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("AppendLine", [typeof(System.Text.StringBuilder.AppendInterpolatedStringHandler /*handler*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("AppendLine", [typeof(System.IFormatProvider /*provider*/), typeof(System.Text.StringBuilder.AppendInterpolatedStringHandler /*handler*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("AppendJoin", [typeof(System.String /*separator*/), typeof(System.Object[] /*values*/),], Accessibility.Protected)
                .WithMethod("AppendJoin", [typeof(System.String /*separator*/), typeof(System.Collections.Generic.IEnumerable<> /*values*/),], Accessibility.Protected)
                .WithMethod("AppendJoin", [typeof(System.String /*separator*/), typeof(System.String[] /*values*/),], Accessibility.Protected)
                .WithMethod("AppendJoin", [typeof(System.Char /*separator*/), typeof(System.Object[] /*values*/),], Accessibility.Protected)
                .WithMethod("AppendJoin", [typeof(System.Char /*separator*/), typeof(System.Collections.Generic.IEnumerable<> /*values*/),], Accessibility.Protected)
                .WithMethod("AppendJoin", [typeof(System.Char /*separator*/), typeof(System.String[] /*values*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.String /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Boolean /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.SByte /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Byte /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Int16 /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Char /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Char[] /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Char[] /*value*/), typeof(System.Int32 /*startIndex*/), typeof(System.Int32 /*charCount*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Int32 /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Int64 /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Single /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Double /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Decimal /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.UInt16 /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.UInt32 /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.UInt64 /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.Object /*value*/),], Accessibility.Protected)
                .WithMethod("Insert", [typeof(System.Int32 /*index*/), typeof(System.ReadOnlySpan<System.Char> /*value*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/), typeof(System.Object /*arg2*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.String /*format*/), typeof(System.Object[] /*args*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.IFormatProvider /*provider*/), typeof(System.String /*format*/), typeof(System.Object /*arg0*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.IFormatProvider /*provider*/), typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.IFormatProvider /*provider*/), typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/), typeof(System.Object /*arg2*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.IFormatProvider /*provider*/), typeof(System.String /*format*/), typeof(System.Object[] /*args*/),], Accessibility.Protected)
                //.WithMethod("AppendFormat", [typeof(System.IFormatProvider /*provider*/), typeof(System.Text.CompositeFormat /*format*/), typeof(TArg0 /*arg0*/),], Accessibility.Protected)
                //.WithMethod("AppendFormat", [typeof(System.IFormatProvider /*provider*/), typeof(System.Text.CompositeFormat /*format*/), typeof(TArg0 /*arg0*/), typeof(TArg1 /*arg1*/),], Accessibility.Protected)
                //.WithMethod("AppendFormat", [typeof(System.IFormatProvider /*provider*/), typeof(System.Text.CompositeFormat /*format*/), typeof(TArg0 /*arg0*/), typeof(TArg1 /*arg1*/), typeof(TArg2 /*arg2*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.IFormatProvider /*provider*/), typeof(System.Text.CompositeFormat /*format*/), typeof(System.Object[] /*args*/),], Accessibility.Protected)
                .WithMethod("AppendFormat", [typeof(System.IFormatProvider /*provider*/), typeof(System.Text.CompositeFormat /*format*/), typeof(System.ReadOnlySpan<System.Object> /*args*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*oldValue*/), typeof(System.String /*newValue*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Text.StringBuilder /*sb*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.ReadOnlySpan<System.Char> /*span*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*oldValue*/), typeof(System.String /*newValue*/), typeof(System.Int32 /*startIndex*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.Char /*oldChar*/), typeof(System.Char /*newChar*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.Char /*oldChar*/), typeof(System.Char /*newChar*/), typeof(System.Int32 /*startIndex*/), typeof(System.Int32 /*count*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Ascii), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.ASCIIEncoding), Accessibility.None)
                .WithConstructor(Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.String /*chars*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.ReadOnlySpan<System.Char> /*chars*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.String /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.ReadOnlySpan<System.Char> /*chars*/), typeof(System.Span<System.Byte> /*bytes*/),], Accessibility.Protected)
                .WithMethod("TryGetBytes", Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/), typeof(System.Span<System.Char> /*chars*/),], Accessibility.Protected)
                .WithMethod("TryGetChars", Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetMaxByteCount", Accessibility.Protected)
                .WithMethod("GetMaxCharCount", Accessibility.Protected)
                .WithMethod("get_IsSingleByte", Accessibility.Protected)
                .WithMethod("GetDecoder", Accessibility.Protected)
                .WithMethod("GetEncoder", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.CompositeFormat), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Decoder), Accessibility.None)
                .WithMethod("get_Fallback", Accessibility.Protected)
                .WithMethod("set_Fallback", Accessibility.Protected)
                .WithMethod("get_FallbackBuffer", Accessibility.Protected)
                .WithMethod("Reset", Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/), typeof(System.Boolean /*flush*/),], Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/), typeof(System.Boolean /*flush*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Boolean /*flush*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/), typeof(System.Span<System.Char> /*chars*/), typeof(System.Boolean /*flush*/),], Accessibility.Protected)
                .WithMethod("Convert", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Boolean /*flush*/), typeof(System.Int32 /*bytesUsed*/).MakeByRefType(), typeof(System.Int32 /*charsUsed*/).MakeByRefType(), typeof(System.Boolean /*completed*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Convert", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/), typeof(System.Span<System.Char> /*chars*/), typeof(System.Boolean /*flush*/), typeof(System.Int32 /*bytesUsed*/).MakeByRefType(), typeof(System.Int32 /*charsUsed*/).MakeByRefType(), typeof(System.Boolean /*completed*/).MakeByRefType(),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.DecoderExceptionFallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.DecoderExceptionFallbackBuffer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.DecoderFallbackException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.DecoderFallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.DecoderFallbackBuffer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.DecoderReplacementFallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.DecoderReplacementFallbackBuffer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Encoder), Accessibility.None)
                .WithMethod("get_Fallback", Accessibility.Protected)
                .WithMethod("set_Fallback", Accessibility.Protected)
                .WithMethod("get_FallbackBuffer", Accessibility.Protected)
                .WithMethod("Reset", Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.ReadOnlySpan<System.Char> /*chars*/), typeof(System.Boolean /*flush*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.ReadOnlySpan<System.Char> /*chars*/), typeof(System.Span<System.Byte> /*bytes*/), typeof(System.Boolean /*flush*/),], Accessibility.Protected)
                .WithMethod("Convert", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Boolean /*flush*/), typeof(System.Int32 /*charsUsed*/).MakeByRefType(), typeof(System.Int32 /*bytesUsed*/).MakeByRefType(), typeof(System.Boolean /*completed*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Convert", [typeof(System.ReadOnlySpan<System.Char> /*chars*/), typeof(System.Span<System.Byte> /*bytes*/), typeof(System.Boolean /*flush*/), typeof(System.Int32 /*charsUsed*/).MakeByRefType(), typeof(System.Int32 /*bytesUsed*/).MakeByRefType(), typeof(System.Boolean /*completed*/).MakeByRefType(),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.EncoderExceptionFallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.EncoderExceptionFallbackBuffer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.EncoderFallbackException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.EncoderFallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.EncoderFallbackBuffer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.EncoderReplacementFallback), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.EncoderReplacementFallbackBuffer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Encoding), Accessibility.None)
                .WithMethod("get_Default", Accessibility.Protected)
                .WithMethod("Convert", [typeof(System.Text.Encoding /*srcEncoding*/), typeof(System.Text.Encoding /*dstEncoding*/), typeof(System.Byte[] /*bytes*/),], Accessibility.Protected)
                .WithMethod("Convert", [typeof(System.Text.Encoding /*srcEncoding*/), typeof(System.Text.Encoding /*dstEncoding*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("RegisterProvider", Accessibility.Protected)
                .WithMethod("GetEncoding", [typeof(System.Int32 /*codepage*/),], Accessibility.Protected)
                .WithMethod("GetEncoding", [typeof(System.Int32 /*codepage*/), typeof(System.Text.EncoderFallback /*encoderFallback*/), typeof(System.Text.DecoderFallback /*decoderFallback*/),], Accessibility.Protected)
                .WithMethod("GetEncoding", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetEncoding", [typeof(System.String /*name*/), typeof(System.Text.EncoderFallback /*encoderFallback*/), typeof(System.Text.DecoderFallback /*decoderFallback*/),], Accessibility.Protected)
                .WithMethod("GetEncodings", Accessibility.Protected)
                .WithMethod("GetPreamble", Accessibility.Protected)
                .WithMethod("get_Preamble", Accessibility.Protected)
                .WithMethod("get_BodyName", Accessibility.Protected)
                .WithMethod("get_EncodingName", Accessibility.Protected)
                .WithMethod("get_HeaderName", Accessibility.Protected)
                .WithMethod("get_WindowsCodePage", Accessibility.Protected)
                .WithMethod("get_IsBrowserDisplay", Accessibility.Protected)
                .WithMethod("get_IsBrowserSave", Accessibility.Protected)
                .WithMethod("get_IsMailNewsDisplay", Accessibility.Protected)
                .WithMethod("get_IsMailNewsSave", Accessibility.Protected)
                .WithMethod("get_IsSingleByte", Accessibility.Protected)
                .WithMethod("get_EncoderFallback", Accessibility.Protected)
                .WithMethod("set_EncoderFallback", Accessibility.Protected)
                .WithMethod("get_DecoderFallback", Accessibility.Protected)
                .WithMethod("set_DecoderFallback", Accessibility.Protected)
                .WithMethod("Clone", Accessibility.Protected)
                .WithMethod("get_IsReadOnly", Accessibility.Protected)
                .WithMethod("get_ASCII", Accessibility.Protected)
                .WithMethod("get_Latin1", Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.String /*s*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.String /*s*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.ReadOnlySpan<System.Char> /*chars*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.String /*s*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.String /*s*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.String /*s*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.ReadOnlySpan<System.Char> /*chars*/), typeof(System.Span<System.Byte> /*bytes*/),], Accessibility.Protected)
                .WithMethod("TryGetBytes", Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/),], Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/), typeof(System.Span<System.Char> /*chars*/),], Accessibility.Protected)
                .WithMethod("TryGetChars", Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/),], Accessibility.Protected)
                .WithMethod("get_CodePage", Accessibility.Protected)
                .WithMethod("IsAlwaysNormalized", [], Accessibility.Protected)
                .WithMethod("IsAlwaysNormalized", [typeof(System.Text.NormalizationForm /*form*/),], Accessibility.Protected)
                .WithMethod("GetDecoder", Accessibility.Protected)
                .WithMethod("GetEncoder", Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/),], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("get_Unicode", Accessibility.Protected)
                .WithMethod("get_BigEndianUnicode", Accessibility.Protected)
                .WithMethod("get_UTF7", Accessibility.Protected)
                .WithMethod("get_UTF8", Accessibility.Protected)
                .WithMethod("get_UTF32", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("CreateTranscodingStream", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.EncodingInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.EncodingProvider), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.NormalizationForm), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Rune), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.SpanLineEnumerator), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.SpanRuneEnumerator), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.StringRuneEnumerator), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.UnicodeEncoding), Accessibility.None)
                .WithField("CharSize", Accessibility.Protected)
                .WithConstructor([], Accessibility.Protected)
                .WithConstructor([typeof(System.Boolean /*bigEndian*/), typeof(System.Boolean /*byteOrderMark*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Boolean /*bigEndian*/), typeof(System.Boolean /*byteOrderMark*/), typeof(System.Boolean /*throwOnInvalidBytes*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.String /*s*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.String /*s*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/),], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetEncoder", Accessibility.Protected)
                .WithMethod("GetDecoder", Accessibility.Protected)
                .WithMethod("GetPreamble", Accessibility.Protected)
                .WithMethod("get_Preamble", Accessibility.Protected)
                .WithMethod("GetMaxByteCount", Accessibility.Protected)
                .WithMethod("GetMaxCharCount", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.UTF32Encoding), Accessibility.None)
                .WithConstructor([], Accessibility.Protected)
                .WithConstructor([typeof(System.Boolean /*bigEndian*/), typeof(System.Boolean /*byteOrderMark*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Boolean /*bigEndian*/), typeof(System.Boolean /*byteOrderMark*/), typeof(System.Boolean /*throwOnInvalidCharacters*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.String /*s*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.String /*s*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/),], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetDecoder", Accessibility.Protected)
                .WithMethod("GetEncoder", Accessibility.Protected)
                .WithMethod("GetMaxByteCount", Accessibility.Protected)
                .WithMethod("GetMaxCharCount", Accessibility.Protected)
                .WithMethod("GetPreamble", Accessibility.Protected)
                .WithMethod("get_Preamble", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.UTF7Encoding), Accessibility.None)
                .WithConstructor([], Accessibility.Protected)
                .WithConstructor([typeof(System.Boolean /*allowOptionals*/),], Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.String /*s*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.String /*s*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/),], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetDecoder", Accessibility.Protected)
                .WithMethod("GetEncoder", Accessibility.Protected)
                .WithMethod("GetMaxByteCount", Accessibility.Protected)
                .WithMethod("GetMaxCharCount", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.UTF8Encoding), Accessibility.None)
                .WithConstructor([], Accessibility.Protected)
                .WithConstructor([typeof(System.Boolean /*encoderShouldEmitUTF8Identifier*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Boolean /*encoderShouldEmitUTF8Identifier*/), typeof(System.Boolean /*throwOnInvalidBytes*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.String /*chars*/),], Accessibility.Protected)
                .WithMethod("GetByteCount", [typeof(System.ReadOnlySpan<System.Char> /*chars*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.String /*s*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/), typeof(System.Int32 /*charCount*/), typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/),], Accessibility.Protected)
                .WithMethod("GetBytes", [typeof(System.ReadOnlySpan<System.Char> /*chars*/), typeof(System.Span<System.Byte> /*bytes*/),], Accessibility.Protected)
                .WithMethod("TryGetBytes", Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("GetCharCount", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/), typeof(System.Char[] /*chars*/), typeof(System.Int32 /*charIndex*/),], Accessibility.Protected)
                .WithMethod("GetChars", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/), typeof(System.Span<System.Char> /*chars*/),], Accessibility.Protected)
                .WithMethod("TryGetChars", Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/), typeof(System.Int32 /*byteIndex*/), typeof(System.Int32 /*byteCount*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.ReadOnlySpan<System.Byte> /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.Byte[] /*bytes*/)], Accessibility.Protected)
                .WithMethod("GetDecoder", Accessibility.Protected)
                .WithMethod("GetEncoder", Accessibility.Protected)
                .WithMethod("GetMaxByteCount", Accessibility.Protected)
                .WithMethod("GetMaxCharCount", Accessibility.Protected)
                .WithMethod("GetPreamble", Accessibility.Protected)
                .WithMethod("get_Preamble", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected));
        return builder
            .Allow(new TypeBinding(typeof(System.Text.Unicode.Utf8), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.ControlledExecution), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.DependentHandle), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.GCSettings), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.JitInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.AmbiguousImplementationException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.GCLargeObjectHeapCompactionMode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.GCLatencyMode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.MemoryFailPoint), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.AssemblyTargetedPatchBandAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.TargetedPatchingOptOutAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.OnDeserializedAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.OnDeserializingAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.OnSerializedAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.OnSerializingAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.OptionalFieldAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.SerializationException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.SerializationInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.SerializationEntry), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.SerializationInfoEnumerator), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.StreamingContext), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Remoting.ObjectHandle), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.ExceptionServices.ExceptionDispatchInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.ComponentGuaranteesAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.ComponentGuaranteesOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.FrameworkName), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.OSPlatformAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.TargetPlatformAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.SupportedOSPlatformAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.UnsupportedOSPlatformAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.ObsoletedOSPlatformAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.SupportedOSPlatformGuardAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.RequiresPreviewFeaturesAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.ResourceConsumptionAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.ResourceExposureAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.ResourceScope), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.TargetFrameworkAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.Versioning.VersioningHelper), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AccessedThroughPropertyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AsyncIteratorMethodBuilder), Accessibility.None)
                .WithMethod("Create", Accessibility.Protected)
                .WithMethod("MoveNext", Accessibility.Protected)
                .WithMethod("AwaitOnCompleted", Accessibility.Protected)
                .WithMethod("Complete", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AsyncMethodBuilderAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AsyncStateMachineAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AsyncTaskMethodBuilder), Accessibility.None)
                .WithMethod("Create", Accessibility.Protected)
                .WithMethod("Start", Accessibility.Protected)
                .WithMethod("SetStateMachine", Accessibility.Protected)
                .WithMethod("AwaitOnCompleted", Accessibility.Protected)
                .WithMethod("get_Task", Accessibility.Protected)
                .WithMethod("SetResult", Accessibility.Protected)
                .WithMethod("SetException", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AsyncTaskMethodBuilder<>), Accessibility.None)
                .WithMethod("Create", Accessibility.Protected)
                .WithMethod("Start", Accessibility.Protected)
                .WithMethod("SetStateMachine", Accessibility.Protected)
                .WithMethod("AwaitOnCompleted", Accessibility.Protected)
                .WithMethod("get_Task", Accessibility.Protected)
                .WithMethod("SetResult", Accessibility.Protected)
                .WithMethod("SetException", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder), Accessibility.None)
                .WithMethod("Create", Accessibility.Protected)
                .WithMethod("Start", Accessibility.Protected)
                .WithMethod("SetStateMachine", Accessibility.Protected)
                .WithMethod("SetResult", Accessibility.Protected)
                .WithMethod("SetException", Accessibility.Protected)
                .WithMethod("get_Task", Accessibility.Protected)
                .WithMethod("AwaitOnCompleted", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder<>), Accessibility.None)
                .WithMethod("Create", Accessibility.Protected)
                .WithMethod("Start", Accessibility.Protected)
                .WithMethod("SetStateMachine", Accessibility.Protected)
                .WithMethod("SetResult", Accessibility.Protected)
                .WithMethod("SetException", Accessibility.Protected)
                .WithMethod("get_Task", Accessibility.Protected)
                .WithMethod("AwaitOnCompleted", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.AsyncVoidMethodBuilder), Accessibility.None)
                .WithMethod("Create", Accessibility.Protected)
                .WithMethod("Start", Accessibility.Protected)
                .WithMethod("SetStateMachine", Accessibility.Protected)
                .WithMethod("AwaitOnCompleted", Accessibility.Protected)
                .WithMethod("SetResult", Accessibility.Protected)
                .WithMethod("SetException", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CallerArgumentExpressionAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CallerLineNumberAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CallerMemberNameAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CallConvCdecl), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CallConvFastcall), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CallConvStdcall), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CallConvSuppressGCTransition), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CallConvThiscall), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CallConvMemberFunction), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CollectionBuilderAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CompilationRelaxations), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CompilationRelaxationsAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CompilerGeneratedAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CompilerGlobalScopeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ConditionalWeakTable<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ConfiguredAsyncDisposable), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ContractHelper), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.CreateNewOnMetadataUpdateAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.DateTimeConstantAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.DecimalConstantAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.DefaultDependencyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.DependencyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.DiscardableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.EnumeratorCancellationAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ExtensionAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.FixedAddressValueTypeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.FixedBufferAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.FormattableStringFactory), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.IndexerNameAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.IsByRefLikeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.InlineArrayAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.IsReadOnlyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.DefaultInterpolatedStringHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.IsUnmanagedAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.IteratorStateMachineAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.LoadHint), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.MethodCodeType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.MethodImplAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.MethodImplOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ModuleInitializerAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.MetadataUpdateOriginalTypeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.NullableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.NullableContextAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.NullablePublicOnlyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ReferenceAssemblyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder), Accessibility.None)
                .WithMethod("Create", Accessibility.Protected)
                .WithMethod("Start", Accessibility.Protected)
                .WithMethod("SetStateMachine", Accessibility.Protected)
                .WithMethod("SetResult", Accessibility.Protected)
                .WithMethod("SetException", Accessibility.Protected)
                .WithMethod("get_Task", Accessibility.Protected)
                .WithMethod("AwaitOnCompleted", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder<>), Accessibility.None)
                .WithMethod("Create", Accessibility.Protected)
                .WithMethod("Start", Accessibility.Protected)
                .WithMethod("SetStateMachine", Accessibility.Protected)
                .WithMethod("SetResult", Accessibility.Protected)
                .WithMethod("SetException", Accessibility.Protected)
                .WithMethod("get_Task", Accessibility.Protected)
                .WithMethod("AwaitOnCompleted", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.PreserveBaseOverridesAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.RefSafetyRulesAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.RequiredMemberAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.RequiresLocationAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.RuntimeCompatibilityAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.RuntimeFeature), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.RuntimeWrappedException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ScopedRefAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.SkipLocalsInitAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.SpecialNameAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.StateMachineAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.StringFreezingAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.StrongBox<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.SwitchExpressionException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.TaskAwaiter), Accessibility.None)
                .WithMethod("get_IsCompleted", Accessibility.Protected)
                .WithMethod("OnCompleted", Accessibility.Protected)
                .WithMethod("GetResult", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.TaskAwaiter<>), Accessibility.None)
                .WithMethod("get_IsCompleted", Accessibility.Protected)
                .WithMethod("OnCompleted", Accessibility.Protected)
                .WithMethod("GetResult", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ConfiguredTaskAwaitable), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ConfiguredTaskAwaitable<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.TupleElementNamesAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.TypeForwardedFromAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.TypeForwardedToAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ValueTaskAwaiter), Accessibility.None)
                .WithMethod("get_IsCompleted", Accessibility.Protected)
                .WithMethod("GetResult", Accessibility.Protected)
                .WithMethod("OnCompleted", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.ValueTaskAwaiter<>), Accessibility.None)
                .WithMethod("get_IsCompleted", Accessibility.Protected)
                .WithMethod("GetResult", Accessibility.Protected)
                .WithMethod("OnCompleted", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Runtime.CompilerServices.YieldAwaitable), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Resources.MissingManifestResourceException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Resources.MissingSatelliteAssemblyException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Resources.NeutralResourcesLanguageAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Resources.ResourceManager), Accessibility.None)
                .WithField("MagicNumber", Accessibility.Protected)
                .WithField("HeaderVersionNumber", Accessibility.Protected)
                .WithConstructor([typeof(System.String /*baseName*/), typeof(System.Reflection.Assembly /*assembly*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*baseName*/), typeof(System.Reflection.Assembly /*assembly*/), typeof(System.Type /*usingResourceSet*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Type /*resourceSource*/),], Accessibility.Protected)
                .WithMethod("get_BaseName", Accessibility.Protected)
                .WithMethod("get_IgnoreCase", Accessibility.Protected)
                .WithMethod("set_IgnoreCase", Accessibility.Protected)
                .WithMethod("get_ResourceSetType", Accessibility.Protected)
                .WithMethod("ReleaseAllResources", Accessibility.Protected)
                .WithMethod("GetResourceSet", Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.String /*name*/), typeof(System.Globalization.CultureInfo /*culture*/),], Accessibility.Protected)
                .WithMethod("GetObject", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetObject", [typeof(System.String /*name*/), typeof(System.Globalization.CultureInfo /*culture*/),], Accessibility.Protected)
                .WithMethod("GetStream", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetStream", [typeof(System.String /*name*/), typeof(System.Globalization.CultureInfo /*culture*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Resources.ResourceReader), Accessibility.None)
                .WithMethod("GetResourceData", Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/),], Accessibility.Protected)
                .WithMethod("Close", Accessibility.Protected)
                .WithMethod("Dispose", [], Accessibility.Protected)
                .WithMethod("GetEnumerator", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Resources.ResourceSet), Accessibility.None)
                .WithConstructor([typeof(System.IO.Stream /*stream*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Resources.IResourceReader /*reader*/),], Accessibility.Protected)
                .WithMethod("Close", Accessibility.Protected)
                .WithMethod("Dispose", [], Accessibility.Protected)
                .WithMethod("Dispose", [typeof(System.Boolean /*explicitDisposing*/)], Accessibility.Protected)
                .WithMethod("GetDefaultReader", Accessibility.Protected)
                .WithMethod("GetDefaultWriter", Accessibility.Protected)
                .WithMethod("GetEnumerator", Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetString", [typeof(System.String /*name*/), typeof(System.Boolean /*ignoreCase*/),], Accessibility.Protected)
                .WithMethod("GetObject", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetObject", [typeof(System.String /*name*/), typeof(System.Boolean /*ignoreCase*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Resources.SatelliteContractVersionAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Resources.UltimateResourceFallbackLocation), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.Assembly), Accessibility.None)
                .WithMethod("Load", [typeof(System.String /*assemblyString*/),], Accessibility.Protected)
                .WithMethod("LoadWithPartialName", Accessibility.Protected)
                .WithMethod("Load", [typeof(System.Reflection.AssemblyName /*assemblyRef*/),], Accessibility.Protected)
                .WithMethod("GetExecutingAssembly", Accessibility.Protected)
                .WithMethod("GetCallingAssembly", Accessibility.Protected)
                .WithMethod("get_DefinedTypes", Accessibility.Protected)
                .WithMethod("GetTypes", Accessibility.Protected)
                .WithMethod("get_ExportedTypes", Accessibility.Protected)
                .WithMethod("GetExportedTypes", Accessibility.Protected)
                .WithMethod("GetForwardedTypes", Accessibility.Protected)
                .WithMethod("get_EntryPoint", Accessibility.Protected)
                .WithMethod("get_FullName", Accessibility.Protected)
                .WithMethod("get_ImageRuntimeVersion", Accessibility.Protected)
                .WithMethod("get_IsDynamic", Accessibility.Protected)
                .WithMethod("get_Location", Accessibility.Protected)
                .WithMethod("get_ReflectionOnly", Accessibility.Protected)
                .WithMethod("get_IsCollectible", Accessibility.Protected)
                .WithMethod("GetManifestResourceInfo", Accessibility.Protected)
                .WithMethod("GetManifestResourceNames", Accessibility.Protected)
                .WithMethod("GetManifestResourceStream", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetManifestResourceStream", [typeof(System.Type /*type*/), typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("get_IsFullyTrusted", Accessibility.Protected)
                .WithMethod("GetName", [], Accessibility.Protected)
                .WithMethod("GetName", [typeof(System.Boolean /*copiedName*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*name*/), typeof(System.Boolean /*throwOnError*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*name*/), typeof(System.Boolean /*throwOnError*/), typeof(System.Boolean /*ignoreCase*/),], Accessibility.Protected)
                .WithMethod("IsDefined", Accessibility.Protected)
                .WithMethod("get_CustomAttributes", Accessibility.Protected)
                .WithMethod("GetCustomAttributesData", Accessibility.Protected)
                .WithMethod("GetCustomAttributes", [typeof(System.Boolean /*inherit*/),], Accessibility.Protected)
                .WithMethod("GetCustomAttributes", [typeof(System.Type /*attributeType*/), typeof(System.Boolean /*inherit*/),], Accessibility.Protected)
                .WithMethod("add_ModuleResolve", Accessibility.Protected)
                .WithMethod("remove_ModuleResolve", Accessibility.Protected)
                .WithMethod("get_ManifestModule", Accessibility.Protected)
                .WithMethod("GetModule", Accessibility.Protected)
                .WithMethod("GetModules", [], Accessibility.Protected)
                .WithMethod("GetModules", [typeof(System.Boolean /*getResourceModules*/),], Accessibility.Protected)
                .WithMethod("get_Modules", Accessibility.Protected)
                .WithMethod("GetLoadedModules", [], Accessibility.Protected)
                .WithMethod("GetLoadedModules", [typeof(System.Boolean /*getResourceModules*/),], Accessibility.Protected)
                .WithMethod("GetReferencedAssemblies", Accessibility.Protected)
                .WithMethod("GetSatelliteAssembly", [typeof(System.Globalization.CultureInfo /*culture*/),], Accessibility.Protected)
                .WithMethod("GetSatelliteAssembly", [typeof(System.Globalization.CultureInfo /*culture*/), typeof(System.Version /*version*/),], Accessibility.Protected)
                .WithMethod("GetObjectData", Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected)
                .WithMethod("get_GlobalAssemblyCache", Accessibility.Protected)
                .WithMethod("get_HostContext", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("CreateQualifiedName", Accessibility.Protected)
                .WithMethod("GetAssembly", Accessibility.Protected)
                .WithMethod("GetEntryAssembly", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyName), Accessibility.None)
                .WithConstructor([typeof(System.String /*assemblyName*/),], Accessibility.Protected)
                .WithConstructor([], Accessibility.Protected)
                .WithMethod("get_Name", Accessibility.Protected)
                .WithMethod("set_Name", Accessibility.Protected)
                .WithMethod("get_Version", Accessibility.Protected)
                .WithMethod("set_Version", Accessibility.Protected)
                .WithMethod("get_CultureInfo", Accessibility.Protected)
                .WithMethod("set_CultureInfo", Accessibility.Protected)
                .WithMethod("get_CultureName", Accessibility.Protected)
                .WithMethod("set_CultureName", Accessibility.Protected)
                .WithMethod("get_CodeBase", Accessibility.Protected)
                .WithMethod("set_CodeBase", Accessibility.Protected)
                .WithMethod("get_EscapedCodeBase", Accessibility.Protected)
                .WithMethod("get_ContentType", Accessibility.Protected)
                .WithMethod("set_ContentType", Accessibility.Protected)
                .WithMethod("Clone", Accessibility.Protected)
                .WithMethod("GetPublicKey", Accessibility.Protected)
                .WithMethod("SetPublicKey", Accessibility.Protected)
                .WithMethod("GetPublicKeyToken", Accessibility.Protected)
                .WithMethod("SetPublicKeyToken", Accessibility.Protected)
                .WithMethod("get_Flags", Accessibility.Protected)
                .WithMethod("set_Flags", Accessibility.Protected)
                .WithMethod("get_HashAlgorithm", Accessibility.Protected)
                .WithMethod("set_HashAlgorithm", Accessibility.Protected)
                .WithMethod("get_VersionCompatibility", Accessibility.Protected)
                .WithMethod("set_VersionCompatibility", Accessibility.Protected)
                .WithMethod("get_KeyPair", Accessibility.Protected)
                .WithMethod("set_KeyPair", Accessibility.Protected)
                .WithMethod("get_FullName", Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected)
                .WithMethod("GetObjectData", Accessibility.Protected)
                .WithMethod("OnDeserialization", Accessibility.Protected)
                .WithMethod("ReferenceMatchesDefinition", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ConstructorInfo), Accessibility.Protected)
                .Where(x => x.Name != "Invoke"))
            .Allow(new TypeBinding(typeof(System.Reflection.FieldInfo), Accessibility.None)
                .WithMethod("GetFieldFromHandle", [typeof(System.RuntimeFieldHandle /*handle*/),], Accessibility.Protected)
                .WithMethod("GetFieldFromHandle", [typeof(System.RuntimeFieldHandle /*handle*/), typeof(System.RuntimeTypeHandle /*declaringType*/),], Accessibility.Protected)
                .WithMethod("get_MemberType", Accessibility.Protected)
                .WithMethod("get_IsInitOnly", Accessibility.Protected)
                .WithMethod("get_IsLiteral", Accessibility.Protected)
                .WithMethod("get_IsNotSerialized", Accessibility.Protected)
                .WithMethod("get_IsPinvokeImpl", Accessibility.Protected)
                .WithMethod("get_IsSpecialName", Accessibility.Protected)
                .WithMethod("get_IsStatic", Accessibility.Protected)
                .WithMethod("get_IsAssembly", Accessibility.Protected)
                .WithMethod("get_IsFamily", Accessibility.Protected)
                .WithMethod("get_IsFamilyAndAssembly", Accessibility.Protected)
                .WithMethod("get_IsFamilyOrAssembly", Accessibility.Protected)
                .WithMethod("get_IsPrivate", Accessibility.Protected)
                .WithMethod("get_IsPublic", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("GetRawConstantValue", Accessibility.Protected)
                .WithMethod("GetModifiedFieldType", Accessibility.Protected)
                .WithMethod("GetOptionalCustomModifiers", Accessibility.Protected)
                .WithMethod("GetRequiredCustomModifiers", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.MemberInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.MethodBase), Accessibility.None)
                .WithMethod("GetMethodFromHandle", [typeof(System.RuntimeMethodHandle /*handle*/),], Accessibility.Protected)
                .WithMethod("GetMethodFromHandle", [typeof(System.RuntimeMethodHandle /*handle*/), typeof(System.RuntimeTypeHandle /*declaringType*/),], Accessibility.Protected)
                .WithMethod("GetCurrentMethod", Accessibility.Protected)
                .WithMethod("get_MethodImplementationFlags", Accessibility.Protected)
                .WithMethod("GetMethodBody", Accessibility.Protected)
                .WithMethod("get_CallingConvention", Accessibility.Protected)
                .WithMethod("get_IsAbstract", Accessibility.Protected)
                .WithMethod("get_IsConstructor", Accessibility.Protected)
                .WithMethod("get_IsFinal", Accessibility.Protected)
                .WithMethod("get_IsHideBySig", Accessibility.Protected)
                .WithMethod("get_IsSpecialName", Accessibility.Protected)
                .WithMethod("get_IsStatic", Accessibility.Protected)
                .WithMethod("get_IsVirtual", Accessibility.Protected)
                .WithMethod("get_IsAssembly", Accessibility.Protected)
                .WithMethod("get_IsFamily", Accessibility.Protected)
                .WithMethod("get_IsFamilyAndAssembly", Accessibility.Protected)
                .WithMethod("get_IsFamilyOrAssembly", Accessibility.Protected)
                .WithMethod("get_IsPrivate", Accessibility.Protected)
                .WithMethod("get_IsPublic", Accessibility.Protected)
                .WithMethod("get_IsConstructedGenericMethod", Accessibility.Protected)
                .WithMethod("get_IsGenericMethod", Accessibility.Protected)
                .WithMethod("get_IsGenericMethodDefinition", Accessibility.Protected)
                .WithMethod("GetGenericArguments", Accessibility.Protected)
                .WithMethod("get_ContainsGenericParameters", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.CustomAttributeTypedArgument), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AmbiguousMatchException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyAlgorithmIdAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyCompanyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyConfigurationAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyContentType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyCopyrightAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyCultureAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyDefaultAliasAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyDelaySignAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyDescriptionAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyFlagsAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyInformationalVersionAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyKeyNameAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyMetadataAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyNameFlags), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyNameProxy), Accessibility.None)
                .WithConstructor(Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyProductAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblySignatureKeyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyTitleAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyTrademarkAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.AssemblyVersionAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.BindingFlags), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.CallingConventions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.CustomAttributeData), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.CustomAttributeExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.CustomAttributeFormatException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.CustomAttributeNamedArgument), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.DefaultMemberAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.EventAttributes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.EventInfo), Accessibility.Protected)
                .Where(x => x.Name != "AddEventHandler" && x.Name != "RemoveEventHandler"))
            .Allow(new TypeBinding(typeof(System.Reflection.ExceptionHandlingClause), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ExceptionHandlingClauseOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.FieldAttributes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.GenericParameterAttributes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.InterfaceMapping), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.IntrospectionExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.InvalidFilterCriteriaException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.LocalVariableInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ManifestResourceInfo), Accessibility.None)
                .WithMethod("get_ReferencedAssembly", Accessibility.Protected)
                .WithMethod("get_ResourceLocation", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.MemberFilter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.MemberTypes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.MethodAttributes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.MethodBody), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.MethodImplAttributes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.MethodInfo), Accessibility.Protected)
                .Where(x => x.Name != "Invoke" && x.Name != "CreateDelegate"))
            .Allow(new TypeBinding(typeof(System.Reflection.Missing), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.Module), Accessibility.None)
                .WithField("FilterTypeName", Accessibility.Protected)
                .WithField("FilterTypeNameIgnoreCase", Accessibility.Protected)
                .WithMethod("get_Assembly", Accessibility.Protected)
                .WithMethod("get_FullyQualifiedName", Accessibility.Protected)
                .WithMethod("get_Name", Accessibility.Protected)
                .WithMethod("get_MDStreamVersion", Accessibility.Protected)
                .WithMethod("get_ModuleVersionId", Accessibility.Protected)
                .WithMethod("get_ScopeName", Accessibility.Protected)
                .WithMethod("get_ModuleHandle", Accessibility.Protected)
                .WithMethod("IsResource", Accessibility.Protected)
                .WithMethod("IsDefined", Accessibility.Protected)
                .WithMethod("get_CustomAttributes", Accessibility.Protected)
                .WithMethod("GetCustomAttributesData", Accessibility.Protected)
                .WithMethod("GetCustomAttributes", [typeof(System.Boolean /*inherit*/),], Accessibility.Protected)
                .WithMethod("GetCustomAttributes", [typeof(System.Type /*attributeType*/), typeof(System.Boolean /*inherit*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Type[] /*types*/),], Accessibility.Protected)
                .WithMethod("GetMethod", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/), typeof(System.Reflection.Binder /*binder*/), typeof(System.Reflection.CallingConventions /*callConvention*/), typeof(System.Type[] /*types*/), typeof(System.Reflection.ParameterModifier[] /*modifiers*/),], Accessibility.Protected)
                .WithMethod("GetMethods", [], Accessibility.Protected)
                .WithMethod("GetMethods", [typeof(System.Reflection.BindingFlags /*bindingFlags*/),], Accessibility.Protected)
                .WithMethod("GetField", [typeof(System.String /*name*/),], Accessibility.Protected)
                .WithMethod("GetField", [typeof(System.String /*name*/), typeof(System.Reflection.BindingFlags /*bindingAttr*/),], Accessibility.Protected)
                .WithMethod("GetFields", [], Accessibility.Protected)
                .WithMethod("GetFields", [typeof(System.Reflection.BindingFlags /*bindingFlags*/),], Accessibility.Protected)
                .WithMethod("GetTypes", Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*className*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*className*/), typeof(System.Boolean /*ignoreCase*/),], Accessibility.Protected)
                .WithMethod("GetType", [typeof(System.String /*className*/), typeof(System.Boolean /*throwOnError*/), typeof(System.Boolean /*ignoreCase*/),], Accessibility.Protected)
                .WithMethod("FindTypes", Accessibility.Protected)
                .WithMethod("get_MetadataToken", Accessibility.Protected)
                .WithMethod("ResolveField", [typeof(System.Int32 /*metadataToken*/),], Accessibility.Protected)
                .WithMethod("ResolveField", [typeof(System.Int32 /*metadataToken*/), typeof(System.Type[] /*genericTypeArguments*/), typeof(System.Type[] /*genericMethodArguments*/),], Accessibility.Protected)
                .WithMethod("ResolveMember", [typeof(System.Int32 /*metadataToken*/),], Accessibility.Protected)
                .WithMethod("ResolveMember", [typeof(System.Int32 /*metadataToken*/), typeof(System.Type[] /*genericTypeArguments*/), typeof(System.Type[] /*genericMethodArguments*/),], Accessibility.Protected)
                .WithMethod("ResolveMethod", [typeof(System.Int32 /*metadataToken*/),], Accessibility.Protected)
                .WithMethod("ResolveMethod", [typeof(System.Int32 /*metadataToken*/), typeof(System.Type[] /*genericTypeArguments*/), typeof(System.Type[] /*genericMethodArguments*/),], Accessibility.Protected)
                .WithMethod("ResolveSignature", Accessibility.Protected)
                .WithMethod("ResolveString", Accessibility.Protected)
                .WithMethod("ResolveType", [typeof(System.Int32 /*metadataToken*/),], Accessibility.Protected)
                .WithMethod("ResolveType", [typeof(System.Int32 /*metadataToken*/), typeof(System.Type[] /*genericTypeArguments*/), typeof(System.Type[] /*genericMethodArguments*/),], Accessibility.Protected)
                .WithMethod("GetObjectData", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected)
                .WithMethod("op_Equality", Accessibility.Protected)
                .WithMethod("op_Inequality", Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ModuleResolveEventHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.NullabilityInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.NullabilityState), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.NullabilityInfoContext), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ObfuscateAssemblyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ObfuscationAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ParameterAttributes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ParameterInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ParameterModifier), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.Pointer), Accessibility.None)
                .WithMethod("Unbox", Accessibility.Protected)
                .WithMethod("Equals", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.PortableExecutableKinds), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.PropertyAttributes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.PropertyInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ReflectionContext), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ReflectionTypeLoadException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ResourceAttributes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.ResourceLocation), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.RuntimeReflectionExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.TargetException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.TargetInvocationException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.TargetParameterCountException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.TypeAttributes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.TypeDelegator), Accessibility.Protected)
                .Where(x => x.Name != "InvokeMember"))
            .Allow(new TypeBinding(typeof(System.Reflection.TypeFilter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.TypeInfo), Accessibility.Protected)
                .Where(x => x.Name != "InvokeMember"))
            .Allow(new TypeBinding(typeof(System.Reflection.Metadata.AssemblyExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.Metadata.MetadataUpdater), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Reflection.Metadata.MetadataUpdateHandlerAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.BinaryReader), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.BinaryWriter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.BufferedStream), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.EnumerationOptions), Accessibility.None)
                .WithConstructor(Accessibility.Protected)
                .WithMethod("get_RecurseSubdirectories", Accessibility.Protected)
                .WithMethod("set_RecurseSubdirectories", Accessibility.Protected)
                .WithMethod("get_IgnoreInaccessible", Accessibility.Protected)
                .WithMethod("set_IgnoreInaccessible", Accessibility.Protected)
                .WithMethod("get_BufferSize", Accessibility.Protected)
                .WithMethod("set_BufferSize", Accessibility.Protected)
                .WithMethod("get_MatchType", Accessibility.Protected)
                .WithMethod("set_MatchType", Accessibility.Protected)
                .WithMethod("get_MatchCasing", Accessibility.Protected)
                .WithMethod("set_MatchCasing", Accessibility.Protected)
                .WithMethod("get_MaxRecursionDepth", Accessibility.Protected)
                .WithMethod("set_MaxRecursionDepth", Accessibility.Protected)
                .WithMethod("get_ReturnSpecialDirectories", Accessibility.Protected)
                .WithMethod("set_ReturnSpecialDirectories", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.EndOfStreamException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.HandleInheritability), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.InvalidDataException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.IOException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.MatchCasing), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.MatchType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.MemoryStream), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.SearchOption), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.SeekOrigin), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.Stream), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.StreamReader), Accessibility.None)
                .WithField("Null", Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/), typeof(System.Boolean /*detectEncodingFromByteOrderMarks*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/), typeof(System.Text.Encoding /*encoding*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/), typeof(System.Text.Encoding /*encoding*/), typeof(System.Boolean /*detectEncodingFromByteOrderMarks*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/), typeof(System.Text.Encoding /*encoding*/), typeof(System.Boolean /*detectEncodingFromByteOrderMarks*/), typeof(System.Int32 /*bufferSize*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/), typeof(System.Text.Encoding /*encoding*/), typeof(System.Boolean /*detectEncodingFromByteOrderMarks*/), typeof(System.Int32 /*bufferSize*/), typeof(System.Boolean /*leaveOpen*/),], Accessibility.Protected)
                .WithMethod("Close", Accessibility.Protected)
                .WithMethod("get_CurrentEncoding", Accessibility.Protected)
                .WithMethod("get_BaseStream", Accessibility.Protected)
                .WithMethod("DiscardBufferedData", Accessibility.Protected)
                .WithMethod("get_EndOfStream", Accessibility.Protected)
                .WithMethod("Peek", Accessibility.Protected)
                .WithMethod("Read", [], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.Char[] /*buffer*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Read", [typeof(System.Span<System.Char> /*buffer*/),], Accessibility.Protected)
                .WithMethod("ReadToEnd", Accessibility.Protected)
                .WithMethod("ReadBlock", [typeof(System.Char[] /*buffer*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("ReadBlock", [typeof(System.Span<System.Char> /*buffer*/),], Accessibility.Protected)
                .WithMethod("ReadLine", Accessibility.Protected)
                .WithMethod("ReadLineAsync", [], Accessibility.Protected)
                .WithMethod("ReadLineAsync", [typeof(System.Threading.CancellationToken /*cancellationToken*/),], Accessibility.Protected)
                .WithMethod("ReadToEndAsync", [], Accessibility.Protected)
                .WithMethod("ReadToEndAsync", [typeof(System.Threading.CancellationToken /*cancellationToken*/),], Accessibility.Protected)
                .WithMethod("ReadAsync", [typeof(System.Char[] /*buffer*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("ReadAsync", [typeof(System.Memory<System.Char> /*buffer*/), typeof(System.Threading.CancellationToken /*cancellationToken*/),], Accessibility.Protected)
                .WithMethod("ReadBlockAsync", [typeof(System.Char[] /*buffer*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("ReadBlockAsync", [typeof(System.Memory<System.Char> /*buffer*/), typeof(System.Threading.CancellationToken /*cancellationToken*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.StreamWriter), Accessibility.None)
                .WithField("Null", Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/), typeof(System.Text.Encoding /*encoding*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/), typeof(System.Text.Encoding /*encoding*/), typeof(System.Int32 /*bufferSize*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.IO.Stream /*stream*/), typeof(System.Text.Encoding /*encoding*/), typeof(System.Int32 /*bufferSize*/), typeof(System.Boolean /*leaveOpen*/),], Accessibility.Protected)
                .WithMethod("Close", Accessibility.Protected)
                .WithMethod("DisposeAsync", Accessibility.Protected)
                .WithMethod("Flush", Accessibility.Protected)
                .WithMethod("get_AutoFlush", Accessibility.Protected)
                .WithMethod("set_AutoFlush", Accessibility.Protected)
                .WithMethod("get_BaseStream", Accessibility.Protected)
                .WithMethod("get_Encoding", Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Char /*value*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Char[] /*buffer*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.Char[] /*buffer*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.ReadOnlySpan<System.Char> /*buffer*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.ReadOnlySpan<System.Char> /*buffer*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/), typeof(System.Object /*arg2*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*format*/), typeof(System.Object[] /*arg*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*format*/), typeof(System.Object /*arg0*/), typeof(System.Object /*arg1*/), typeof(System.Object /*arg2*/),], Accessibility.Protected)
                .WithMethod("WriteLine", [typeof(System.String /*format*/), typeof(System.Object[] /*arg*/),], Accessibility.Protected)
                .WithMethod("WriteAsync", [typeof(System.Char /*value*/),], Accessibility.Protected)
                .WithMethod("WriteAsync", [typeof(System.String /*value*/),], Accessibility.Protected)
                .WithMethod("WriteAsync", [typeof(System.Char[] /*buffer*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("WriteAsync", [typeof(System.ReadOnlyMemory<System.Char> /*buffer*/), typeof(System.Threading.CancellationToken /*cancellationToken*/),], Accessibility.Protected)
                .WithMethod("WriteLineAsync", [], Accessibility.Protected)
                .WithMethod("WriteLineAsync", [typeof(System.Char /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLineAsync", [typeof(System.String /*value*/),], Accessibility.Protected)
                .WithMethod("WriteLineAsync", [typeof(System.Char[] /*buffer*/), typeof(System.Int32 /*index*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("WriteLineAsync", [typeof(System.ReadOnlyMemory<System.Char> /*buffer*/), typeof(System.Threading.CancellationToken /*cancellationToken*/),], Accessibility.Protected)
                .WithMethod("FlushAsync", [], Accessibility.Protected)
                .WithMethod("FlushAsync", [typeof(System.Threading.CancellationToken /*cancellationToken*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.StringReader), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.StringWriter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.TextReader), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.IO.TextWriter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Debugger), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.StackFrame), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.StackTrace), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.ConditionalAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Debug), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggerBrowsableState), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggerBrowsableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggerDisplayAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggerHiddenAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggerNonUserCodeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggerStepperBoundaryAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggerStepThroughAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggerTypeProxyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.DebuggerVisualizerAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.StackFrameExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.StackTraceHiddenAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Stopwatch), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.UnreachableException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractFailedEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.PureAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractClassAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractClassForAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractInvariantMethodAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractVerificationAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractArgumentValidatorAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractAbbreviatorAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractOptionAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.Contract), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Contracts.ContractFailureKind), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.ExperimentalAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.AllowNullAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.DisallowNullAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.MaybeNullAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.NotNullAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.NotNullWhenAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.MemberNotNullAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.UnscopedRefAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.StringSyntaxAttribute), Accessibility.None)
                .WithField("CompositeFormat", Accessibility.Protected)
                .WithField("DateOnlyFormat", Accessibility.Protected)
                .WithField("DateTimeFormat", Accessibility.Protected)
                .WithField("EnumFormat", Accessibility.Protected)
                .WithField("GuidFormat", Accessibility.Protected)
                .WithField("Json", Accessibility.Protected)
                .WithField("NumericFormat", Accessibility.Protected)
                .WithField("Regex", Accessibility.Protected)
                .WithField("TimeOnlyFormat", Accessibility.Protected)
                .WithField("TimeSpanFormat", Accessibility.Protected)
                .WithField("Xml", Accessibility.Protected)
                .WithConstructor([typeof(System.String /*syntax*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*syntax*/), typeof(System.Object[] /*arguments*/),], Accessibility.Protected)
                .WithMethod("get_Syntax", Accessibility.Protected)
                .WithMethod("get_Arguments", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.SuppressMessageAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.DiagnosticCounter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventActivityOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventCounter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventSource), Accessibility.None)
                .WithMethod("get_Name", Accessibility.Protected)
                .WithMethod("get_Guid", Accessibility.Protected)
                .WithMethod("IsEnabled", [], Accessibility.Protected)
                .WithMethod("IsEnabled", [typeof(System.Diagnostics.Tracing.EventLevel /*level*/), typeof(System.Diagnostics.Tracing.EventKeywords /*keywords*/),], Accessibility.Protected)
                .WithMethod("IsEnabled", [typeof(System.Diagnostics.Tracing.EventLevel /*level*/), typeof(System.Diagnostics.Tracing.EventKeywords /*keywords*/), typeof(System.Diagnostics.Tracing.EventChannel /*channel*/),], Accessibility.Protected)
                .WithMethod("get_Settings", Accessibility.Protected)
                .WithMethod("GetGuid", Accessibility.Protected)
                .WithMethod("GetName", Accessibility.Protected)
                .WithMethod("GetSources", Accessibility.Protected)
                .WithMethod("SendCommand", Accessibility.Protected)
                .WithMethod("get_ConstructionException", Accessibility.Protected)
                .WithMethod("GetTrait", Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected)
                .WithMethod("add_EventCommandExecuted", Accessibility.Protected)
                .WithMethod("remove_EventCommandExecuted", Accessibility.Protected)
                .WithMethod("SetCurrentThreadActivityId", [typeof(System.Guid /*activityId*/),], Accessibility.Protected)
                .WithMethod("get_CurrentThreadActivityId", Accessibility.Protected)
                .WithMethod("SetCurrentThreadActivityId", [typeof(System.Guid /*activityId*/), typeof(System.Guid /*oldActivityThatWillContinue*/).MakeByRefType(),], Accessibility.Protected)
                .WithMethod("Dispose", [], Accessibility.Protected)
                .WithMethod("Dispose", [typeof(System.Boolean /*explicitDisposing*/)], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*eventSourceName*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*eventSourceName*/), typeof(System.Diagnostics.Tracing.EventSourceSettings /*config*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*eventSourceName*/), typeof(System.Diagnostics.Tracing.EventSourceSettings /*config*/), typeof(System.String[] /*traits*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*eventName*/),], Accessibility.Protected)
                .WithMethod("Write", [typeof(System.String /*eventName*/), typeof(System.Diagnostics.Tracing.EventSourceOptions /*options*/),], Accessibility.Protected))
                //.WithMethod("Write", [typeof(System.String /*eventName*/), typeof(T /*data*/),], Accessibility.Protected)
                //.WithMethod("Write", [typeof(System.String /*eventName*/), typeof(System.Diagnostics.Tracing.EventSourceOptions /*options*/), typeof(T /*data*/),], Accessibility.Protected)
                //.WithMethod("Write", [typeof(System.String /*eventName*/), typeof(System.Diagnostics.Tracing.EventSourceOptions /*options*/).MakeByRefType(), typeof(T /*data*/).MakeByRefType(),], Accessibility.Protected)
                //.WithMethod("Write", [typeof(System.String /*eventName*/), typeof(System.Diagnostics.Tracing.EventSourceOptions /*options*/).MakeByRefType(), typeof(System.Guid /*activityId*/).MakeByRefType(), typeof(System.Guid /*relatedActivityId*/).MakeByRefType(), typeof(T /*data*/).MakeByRefType(),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventSourceSettings), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventListener), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventCommandEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventSourceCreatedEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventWrittenEventArgs), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventSourceAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.NonEventAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventCommand), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventManifestOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventSourceException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.IncrementingEventCounter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.IncrementingPollingCounter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.PollingCounter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventLevel), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventTask), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventOpcode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventChannel), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventKeywords), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventDataAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventFieldTags), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventFieldAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventFieldFormat), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventIgnoreAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventSourceOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Diagnostics.Tracing.EventTags), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.ArrayList), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Comparer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.DictionaryEntry), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Hashtable), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.ObjectModel.Collection<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.ObjectModel.ReadOnlyCollection<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.ObjectModel.ReadOnlyDictionary<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Concurrent.ConcurrentQueue<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.Comparer<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.EqualityComparer<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.CollectionExtensions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.Dictionary<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.HashSet<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.KeyNotFoundException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.KeyValuePair), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.KeyValuePair<,>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.List<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.Queue<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Collections.Generic.ReferenceEqualityComparer), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Reflection.TypeExtensions</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemReflectionTypeExtensions(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Reflection.TypeExtensions"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Runtime.Numerics</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemRuntimeNumerics(this CasPolicyBuilder builder)
    {

        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Runtime.Numerics"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Runtime.SerializationFormatters</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemRuntimeSerializationFormatters(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new TypeBinding(typeof(System.Runtime.Serialization.SerializationBinder), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Text.Json</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemTextJson(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonNamingPolicy), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonCommentHandling), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonSerializerDefaults), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonDocument), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonDocumentOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonElement), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonProperty), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonValueKind), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonEncodedText), Accessibility.None)
                .WithMethod("get_EncodedUtf8Bytes", Accessibility.Protected)
                .WithMethod("get_Value", Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Text.Json.JsonEncodedText /*other*/),], Accessibility.Protected)
                .WithMethod("Equals", [typeof(System.Object /*obj*/),], Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected)
                .WithMethod("GetHashCode", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonException), Accessibility.None)
                .WithConstructor([typeof(System.String /*message*/), typeof(System.Exception /*innerException*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*message*/),], Accessibility.Protected)
                .WithConstructor([], Accessibility.Protected)
                .WithMethod("GetObjectData", Accessibility.Protected)
                .WithMethod("get_LineNumber", Accessibility.Protected)
                .WithMethod("get_BytePositionInLine", Accessibility.Protected)
                .WithMethod("get_Message", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonTokenType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonReaderOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonReaderState), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Utf8JsonReader), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonSerializer), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonSerializerOptions), Accessibility.None)
                .WithMethod("GetTypeInfo", Accessibility.Protected)
                .WithMethod("TryGetTypeInfo", Accessibility.Protected)
                .WithMethod("get_Converters", Accessibility.Protected)
                .WithMethod("GetConverter", Accessibility.Protected)
                .WithMethod("get_Default", Accessibility.Protected)
                .WithConstructor([], Accessibility.Protected)
                .WithConstructor([typeof(System.Text.Json.JsonSerializerOptions /*options*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.Text.Json.JsonSerializerDefaults /*defaults*/),], Accessibility.Protected)
                .WithMethod("AddContext", Accessibility.Protected)
                .WithMethod("get_TypeInfoResolver", Accessibility.Protected)
                .WithMethod("set_TypeInfoResolver", Accessibility.Protected)
                .WithMethod("get_TypeInfoResolverChain", Accessibility.Protected)
                .WithMethod("get_AllowTrailingCommas", Accessibility.Protected)
                .WithMethod("set_AllowTrailingCommas", Accessibility.Protected)
                .WithMethod("get_DefaultBufferSize", Accessibility.Protected)
                .WithMethod("set_DefaultBufferSize", Accessibility.Protected)
                .WithMethod("get_DictionaryKeyPolicy", Accessibility.Protected)
                .WithMethod("set_DictionaryKeyPolicy", Accessibility.Protected)
                .WithMethod("get_IgnoreNullValues", Accessibility.Protected)
                .WithMethod("set_IgnoreNullValues", Accessibility.Protected)
                .WithMethod("get_DefaultIgnoreCondition", Accessibility.Protected)
                .WithMethod("set_DefaultIgnoreCondition", Accessibility.Protected)
                .WithMethod("get_NumberHandling", Accessibility.Protected)
                .WithMethod("set_NumberHandling", Accessibility.Protected)
                .WithMethod("get_PreferredObjectCreationHandling", Accessibility.Protected)
                .WithMethod("set_PreferredObjectCreationHandling", Accessibility.Protected)
                .WithMethod("get_IgnoreReadOnlyProperties", Accessibility.Protected)
                .WithMethod("set_IgnoreReadOnlyProperties", Accessibility.Protected)
                .WithMethod("get_IgnoreReadOnlyFields", Accessibility.Protected)
                .WithMethod("set_IgnoreReadOnlyFields", Accessibility.Protected)
                .WithMethod("get_IncludeFields", Accessibility.Protected)
                .WithMethod("set_IncludeFields", Accessibility.Protected)
                .WithMethod("get_MaxDepth", Accessibility.Protected)
                .WithMethod("set_MaxDepth", Accessibility.Protected)
                .WithMethod("get_PropertyNamingPolicy", Accessibility.Protected)
                .WithMethod("set_PropertyNamingPolicy", Accessibility.Protected)
                .WithMethod("get_PropertyNameCaseInsensitive", Accessibility.Protected)
                .WithMethod("set_PropertyNameCaseInsensitive", Accessibility.Protected)
                .WithMethod("get_ReadCommentHandling", Accessibility.Protected)
                .WithMethod("set_ReadCommentHandling", Accessibility.Protected)
                .WithMethod("get_UnknownTypeHandling", Accessibility.Protected)
                .WithMethod("set_UnknownTypeHandling", Accessibility.Protected)
                .WithMethod("get_UnmappedMemberHandling", Accessibility.Protected)
                .WithMethod("set_UnmappedMemberHandling", Accessibility.Protected)
                .WithMethod("get_WriteIndented", Accessibility.Protected)
                .WithMethod("set_WriteIndented", Accessibility.Protected)
                .WithMethod("get_ReferenceHandler", Accessibility.Protected)
                .WithMethod("set_ReferenceHandler", Accessibility.Protected)
                .WithMethod("get_IsReadOnly", Accessibility.Protected)
                .WithMethod("MakeReadOnly", [], Accessibility.Protected)
                .WithMethod("MakeReadOnly", [typeof(System.Boolean /*populateMissingResolver*/),], Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.JsonWriterOptions), Accessibility.None)
                .WithMethod("get_Indented", Accessibility.Protected)
                .WithMethod("set_Indented", Accessibility.Protected)
                .WithMethod("get_MaxDepth", Accessibility.Protected)
                .WithMethod("set_MaxDepth", Accessibility.Protected)
                .WithMethod("get_SkipValidation", Accessibility.Protected)
                .WithMethod("set_SkipValidation", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Utf8JsonWriter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Nodes.JsonArray), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Nodes.JsonNode), Accessibility.None))
            .Allow(new TypeBinding(typeof(System.Text.Json.Nodes.JsonNodeOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Nodes.JsonObject), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Nodes.JsonValue), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonIgnoreCondition), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonKnownNamingPolicy), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonNumberHandling), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonObjectCreationHandling), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonUnmappedMemberHandling), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonSerializableAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonSourceGenerationMode), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonUnknownTypeHandling), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonObjectCreationHandlingAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonConstructorAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonConverterAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonDerivedTypeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonExtensionDataAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonIgnoreAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonIncludeAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonNumberHandlingAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonPolymorphicAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonPropertyNameAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonRequiredAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonPropertyOrderAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonUnmappedMemberHandlingAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonNumberEnumConverter<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonSerializerContext), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonConverterFactory), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonConverter<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.JsonStringEnumConverter), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.ReferenceHandler), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.ReferenceHandler<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonDerivedType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonPolymorphismOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonTypeInfo<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonTypeInfoKind), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonMetadataServices), Accessibility.None))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonParameterInfoValues), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonPropertyInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<>), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.Json.Serialization.Metadata.JsonTypeInfo), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Text.RegularExpressions</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemTextRegularExpressions(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.ValueMatch), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.Capture), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.CaptureCollection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.Group), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.GroupCollection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.Match), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.MatchCollection), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.Regex), Accessibility.None)
                .WithField("pattern", Accessibility.Protected)
                .WithField("roptions", Accessibility.Protected)
                .WithField("factory", Accessibility.Protected)
                .WithField("caps", Accessibility.Protected)
                .WithField("capnames", Accessibility.Protected)
                .WithField("capslist", Accessibility.Protected)
                .WithField("capsize", Accessibility.Protected)
                .WithField("InfiniteMatchTimeout", Accessibility.Protected)
                .WithField("internalMatchTimeout", Accessibility.Protected)
                .WithConstructor([typeof(System.String /*pattern*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithConstructor([typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("ValidateMatchTimeout", Accessibility.Protected)
                .WithMethod("Escape", Accessibility.Protected)
                .WithMethod("Unescape", Accessibility.Protected)
                .WithMethod("get_Options", Accessibility.Protected)
                .WithMethod("get_RightToLeft", Accessibility.Protected)
                .WithMethod("ToString", Accessibility.Protected)
                .WithMethod("GetGroupNames", Accessibility.Protected)
                .WithMethod("GetGroupNumbers", Accessibility.Protected)
                .WithMethod("GroupNameFromNumber", Accessibility.Protected)
                .WithMethod("GroupNumberFromName", Accessibility.Protected)
                .WithMethod("get_CacheSize", Accessibility.Protected)
                .WithMethod("set_CacheSize", Accessibility.Protected)
                .WithMethod("Count", [typeof(System.String /*input*/),], Accessibility.Protected)
                .WithMethod("Count", [typeof(System.ReadOnlySpan<System.Char> /*input*/),], Accessibility.Protected)
                .WithMethod("Count", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.Int32 /*startat*/),], Accessibility.Protected)
                .WithMethod("Count", [typeof(System.String /*input*/), typeof(System.String /*pattern*/),], Accessibility.Protected)
                .WithMethod("Count", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("Count", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("Count", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.String /*pattern*/),], Accessibility.Protected)
                .WithMethod("Count", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("Count", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.String /*input*/), typeof(System.String /*pattern*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.String /*pattern*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.String /*input*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.String /*input*/), typeof(System.Int32 /*startat*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.ReadOnlySpan<System.Char> /*input*/),], Accessibility.Protected)
                .WithMethod("IsMatch", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.Int32 /*startat*/),], Accessibility.Protected)
                .WithMethod("Match", [typeof(System.String /*input*/), typeof(System.String /*pattern*/),], Accessibility.Protected)
                .WithMethod("Match", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("Match", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("Match", [typeof(System.String /*input*/),], Accessibility.Protected)
                .WithMethod("Match", [typeof(System.String /*input*/), typeof(System.Int32 /*startat*/),], Accessibility.Protected)
                .WithMethod("Match", [typeof(System.String /*input*/), typeof(System.Int32 /*beginning*/), typeof(System.Int32 /*length*/),], Accessibility.Protected)
                .WithMethod("Matches", [typeof(System.String /*input*/), typeof(System.String /*pattern*/),], Accessibility.Protected)
                .WithMethod("Matches", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("Matches", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("Matches", [typeof(System.String /*input*/),], Accessibility.Protected)
                .WithMethod("Matches", [typeof(System.String /*input*/), typeof(System.Int32 /*startat*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.String /*replacement*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.String /*replacement*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.String /*replacement*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.String /*replacement*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.String /*replacement*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.String /*replacement*/), typeof(System.Int32 /*count*/), typeof(System.Int32 /*startat*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.MatchEvaluator /*evaluator*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.MatchEvaluator /*evaluator*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.MatchEvaluator /*evaluator*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.Text.RegularExpressions.MatchEvaluator /*evaluator*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.Text.RegularExpressions.MatchEvaluator /*evaluator*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Replace", [typeof(System.String /*input*/), typeof(System.Text.RegularExpressions.MatchEvaluator /*evaluator*/), typeof(System.Int32 /*count*/), typeof(System.Int32 /*startat*/),], Accessibility.Protected)
                .WithMethod("Split", [typeof(System.String /*input*/), typeof(System.String /*pattern*/),], Accessibility.Protected)
                .WithMethod("Split", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("Split", [typeof(System.String /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("Split", [typeof(System.String /*input*/),], Accessibility.Protected)
                .WithMethod("Split", [typeof(System.String /*input*/), typeof(System.Int32 /*count*/),], Accessibility.Protected)
                .WithMethod("Split", [typeof(System.String /*input*/), typeof(System.Int32 /*count*/), typeof(System.Int32 /*startat*/),], Accessibility.Protected)
                .WithMethod("EnumerateMatches", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.String /*pattern*/),], Accessibility.Protected)
                .WithMethod("EnumerateMatches", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/),], Accessibility.Protected)
                .WithMethod("EnumerateMatches", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.String /*pattern*/), typeof(System.Text.RegularExpressions.RegexOptions /*options*/), typeof(System.TimeSpan /*matchTimeout*/),], Accessibility.Protected)
                .WithMethod("EnumerateMatches", [typeof(System.ReadOnlySpan<System.Char> /*input*/),], Accessibility.Protected)
                .WithMethod("EnumerateMatches", [typeof(System.ReadOnlySpan<System.Char> /*input*/), typeof(System.Int32 /*startat*/),], Accessibility.Protected)
                .WithMethod("get_MatchTimeout", Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.MatchEvaluator), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.GeneratedRegexAttribute), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.RegexMatchTimeoutException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.RegexOptions), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.RegexParseError), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.RegexParseException), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Text.RegularExpressions.RegexRunner), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Threading.Channels</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemThreadingChannels(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Threading.Channels"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Threading</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemThreading(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Threading"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Threading.Tasks.Dataflow</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemThreadingTasksDataflow(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Threading.Tasks.Dataflow"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Threading.Tasks.Parallel</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemThreadingTasksParallel(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new AssemblyBinding(Assembly.Load("System.Threading.Tasks.Parallel"), Accessibility.Protected));
    }

    /// <summary>
    /// Adds all safe members from the <c>System.Linq.Expressions</c> assembly.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedSystemLinqExpressions(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.BinaryExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.Expression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.BlockExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.CatchBlock), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.ConditionalExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.ConstantExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.DebugInfoExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.DefaultExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.ElementInit), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.ExpressionType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.ExpressionVisitor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.GotoExpressionKind), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.GotoExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.IndexExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.InvocationExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.LabelExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.LabelTarget), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.LambdaExpression), Accessibility.Protected)
                .Where(x => x.Name != "Compile"))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.Expression<>), Accessibility.Protected)
                .Where(x => x.Name != "Compile"))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.ListInitExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.LoopExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.MemberAssignment), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.MemberBindingType), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.MemberBinding), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.MemberExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.MemberInitExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.MemberListBinding), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.MemberMemberBinding), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.MethodCallExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.NewArrayExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.NewExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.ParameterExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.RuntimeVariablesExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.SwitchCase), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.SwitchExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.SymbolDocumentInfo), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.TryExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.TypeBinaryExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.UnaryExpression), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.DynamicExpressionVisitor), Accessibility.Protected))
            .Allow(new TypeBinding(typeof(System.Linq.Expressions.DynamicExpression), Accessibility.Protected))
            .Allow(new TypeBinding(Type.GetType("System.Linq.Expressions.PropertyExpression, System.Linq.Expressions")!, Accessibility.Public));
    }

    /// <summary>
    /// Adds all safe members from the runtime reflection system, such as <c>System.RuntimeType</c>.
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithSandboxedRuntimeReflection(this CasPolicyBuilder builder)
    {
        return builder
            .Allow(new TypeBinding(typeof(SecurityException), Accessibility.Protected))
            .Allow(new TypeBinding(Type.GetType("System.RuntimeType")!, Accessibility.Public)
                .Where(x => x.Name != "InvokeMember" && x.Name != "CreateDelegate"))
            .Allow(new TypeBinding(Type.GetType("System.Reflection.RuntimeFieldInfo")!, Accessibility.Public)
                .Where(x => x.Name != "GetValue" && x.Name != "SetValue" && x.Name != "GetValueDirect" && x.Name != "SetValueDirect"))
            .Allow(new TypeBinding(Type.GetType("System.Reflection.RtFieldInfo")!, Accessibility.Public)
                .Where(x => x.Name != "GetValue" && x.Name != "SetValue" && x.Name != "GetValueDirect" && x.Name != "SetValueDirect"))
            .Allow(new TypeBinding(Type.GetType("System.Reflection.RuntimeConstructorInfo")!, Accessibility.Public)
                .Where(x => x.Name != "Invoke"))
            .Allow(new TypeBinding(Type.GetType("System.Reflection.RuntimeMethodInfo")!, Accessibility.Public)
                .Where(x => x.Name != "Invoke" && x.Name != "CreateDelegate"))
            .Allow(new TypeBinding(Type.GetType("System.Reflection.RuntimePropertyInfo")!, Accessibility.Public)
                .Where(x => x.Name != "GetValue" && x.Name != "SetValue"))
            .Allow(new TypeBinding(Type.GetType("System.Reflection.RuntimeParameterInfo")!, Accessibility.Public))
            .Allow(new TypeBinding(Type.GetType("System.SZArrayHelper")!, Accessibility.Private)
                .Where(x => x is not ConstructorInfo))
            .Allow(new TypeBinding(Type.GetType("System.SZGenericArrayEnumeratorBase")!, Accessibility.Public))
            .Allow(new TypeBinding(Type.GetType("System.SZGenericArrayEnumerator`1")!, Accessibility.Public));
    }

    /// <summary>
    /// Adds a safe subset of the C# standard library to the policy.
    /// The aim of this method is to provide a sensible default whitelist that
    /// ensures any loaded assemblies cannot gain access to the host system.
    /// Specifically, the following APIs are excluded from this whitelist:
    /// <list type="bullet">
    /// <item><description>Cause undefined behavior</description></item>
    /// <item><description>Access the filesystem</description></item>
    /// <item><description>Access the network</description></item>
    /// <item><description>Access other OS-specific resources (such as processes or pipes)</description></item>
    /// <item><description>Allow for loading other code without verification (such as <c>System.Reflection.Emit</c>)</description></item>
    /// </list>
    /// </summary>
    /// <param name="builder">The builder to which members should be added.</param>
    /// <returns>The modified builder.</returns>
    public static CasPolicyBuilder WithDefaultSandbox(this CasPolicyBuilder builder)
    {
        return builder.WithSandboxedSystemCollectionsConcurrent()
            .WithSandboxedSystemCollections()
            .WithSandboxedSystemCollectionsImmutable()
            .WithSandboxedSystemCollectionsNonGeneric()
            .WithSandboxedSystemCollectionsSpecialized()
            .WithSandboxedSystemComponentModelTypeConverter()
            .WithSandboxedSystemConsole()
            .WithSandboxedSystemDiagnosticsDiagnosticSource()
            .WithSandboxedSystemLinq()
            .WithSandboxedSystemLinqParallel()
            .WithSandboxedSystemLinqQueryable()
            .WithSandboxedSystemObjectModel()
            .WithSandboxedSystem()
            .WithSandboxedSystemReflectionTypeExtensions()
            .WithSandboxedSystemRuntimeNumerics()
            .WithSandboxedSystemRuntimeSerializationFormatters()
            .WithSandboxedSystemTextJson()
            .WithSandboxedSystemTextRegularExpressions()
            .WithSandboxedSystemThreadingChannels()
            .WithSandboxedSystemThreading()
            .WithSandboxedSystemThreadingTasksDataflow()
            .WithSandboxedSystemThreadingTasksParallel()
            .WithSandboxedSystemLinqExpressions()
            .WithSandboxedRuntimeReflection();
    }
}